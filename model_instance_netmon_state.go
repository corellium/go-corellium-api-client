/*
Corellium API

REST API to manage your virtual devices.

API version: 5.5.0-18750
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"encoding/json"
)

// checks if the InstanceNetmonState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceNetmonState{}

// InstanceNetmonState 
type InstanceNetmonState struct {
	// 
	Hash NullableString `json:"hash,omitempty"`
	// 
	Info NullableString `json:"info,omitempty"`
	// 
	Enabled NullableBool `json:"enabled,omitempty"`
}

// NewInstanceNetmonState instantiates a new InstanceNetmonState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceNetmonState() *InstanceNetmonState {
	this := InstanceNetmonState{}
	return &this
}

// NewInstanceNetmonStateWithDefaults instantiates a new InstanceNetmonState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceNetmonStateWithDefaults() *InstanceNetmonState {
	this := InstanceNetmonState{}
	return &this
}

// GetHash returns the Hash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceNetmonState) GetHash() string {
	if o == nil || IsNil(o.Hash.Get()) {
		var ret string
		return ret
	}
	return *o.Hash.Get()
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceNetmonState) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hash.Get(), o.Hash.IsSet()
}

// HasHash returns a boolean if a field has been set.
func (o *InstanceNetmonState) HasHash() bool {
	if o != nil && o.Hash.IsSet() {
		return true
	}

	return false
}

// SetHash gets a reference to the given NullableString and assigns it to the Hash field.
func (o *InstanceNetmonState) SetHash(v string) {
	o.Hash.Set(&v)
}
// SetHashNil sets the value for Hash to be an explicit nil
func (o *InstanceNetmonState) SetHashNil() {
	o.Hash.Set(nil)
}

// UnsetHash ensures that no value is present for Hash, not even an explicit nil
func (o *InstanceNetmonState) UnsetHash() {
	o.Hash.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceNetmonState) GetInfo() string {
	if o == nil || IsNil(o.Info.Get()) {
		var ret string
		return ret
	}
	return *o.Info.Get()
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceNetmonState) GetInfoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Info.Get(), o.Info.IsSet()
}

// HasInfo returns a boolean if a field has been set.
func (o *InstanceNetmonState) HasInfo() bool {
	if o != nil && o.Info.IsSet() {
		return true
	}

	return false
}

// SetInfo gets a reference to the given NullableString and assigns it to the Info field.
func (o *InstanceNetmonState) SetInfo(v string) {
	o.Info.Set(&v)
}
// SetInfoNil sets the value for Info to be an explicit nil
func (o *InstanceNetmonState) SetInfoNil() {
	o.Info.Set(nil)
}

// UnsetInfo ensures that no value is present for Info, not even an explicit nil
func (o *InstanceNetmonState) UnsetInfo() {
	o.Info.Unset()
}

// GetEnabled returns the Enabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceNetmonState) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled.Get()) {
		var ret bool
		return ret
	}
	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceNetmonState) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// HasEnabled returns a boolean if a field has been set.
func (o *InstanceNetmonState) HasEnabled() bool {
	if o != nil && o.Enabled.IsSet() {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given NullableBool and assigns it to the Enabled field.
func (o *InstanceNetmonState) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}
// SetEnabledNil sets the value for Enabled to be an explicit nil
func (o *InstanceNetmonState) SetEnabledNil() {
	o.Enabled.Set(nil)
}

// UnsetEnabled ensures that no value is present for Enabled, not even an explicit nil
func (o *InstanceNetmonState) UnsetEnabled() {
	o.Enabled.Unset()
}

func (o InstanceNetmonState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceNetmonState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Hash.IsSet() {
		toSerialize["hash"] = o.Hash.Get()
	}
	if o.Info.IsSet() {
		toSerialize["info"] = o.Info.Get()
	}
	if o.Enabled.IsSet() {
		toSerialize["enabled"] = o.Enabled.Get()
	}
	return toSerialize, nil
}

type NullableInstanceNetmonState struct {
	value *InstanceNetmonState
	isSet bool
}

func (v NullableInstanceNetmonState) Get() *InstanceNetmonState {
	return v.value
}

func (v *NullableInstanceNetmonState) Set(val *InstanceNetmonState) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceNetmonState) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceNetmonState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceNetmonState(val *InstanceNetmonState) *NullableInstanceNetmonState {
	return &NullableInstanceNetmonState{value: val, isSet: true}
}

func (v NullableInstanceNetmonState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceNetmonState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



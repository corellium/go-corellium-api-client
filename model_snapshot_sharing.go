/*
Corellium API

REST API to manage your virtual devices.

API version: 6.6.0-24071
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"encoding/json"
)

// checks if the SnapshotSharing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotSharing{}

// SnapshotSharing 
type SnapshotSharing struct {
	// 
	SharingType string `json:"sharingType"`
	// Password with using passwordPublicLink
	Password NullableString `json:"password,omitempty"`
	SharedBy *SnapshotOwner `json:"sharedBy,omitempty"`
	// The members who have access to the snapshot
	Members []SnapshotMember `json:"members,omitempty"`
}

// NewSnapshotSharing instantiates a new SnapshotSharing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotSharing(sharingType string) *SnapshotSharing {
	this := SnapshotSharing{}
	this.SharingType = sharingType
	return &this
}

// NewSnapshotSharingWithDefaults instantiates a new SnapshotSharing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotSharingWithDefaults() *SnapshotSharing {
	this := SnapshotSharing{}
	return &this
}

// GetSharingType returns the SharingType field value
func (o *SnapshotSharing) GetSharingType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SharingType
}

// GetSharingTypeOk returns a tuple with the SharingType field value
// and a boolean to check if the value has been set.
func (o *SnapshotSharing) GetSharingTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SharingType, true
}

// SetSharingType sets field value
func (o *SnapshotSharing) SetSharingType(v string) {
	o.SharingType = v
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotSharing) GetPassword() string {
	if o == nil || IsNil(o.Password.Get()) {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotSharing) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *SnapshotSharing) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *SnapshotSharing) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *SnapshotSharing) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *SnapshotSharing) UnsetPassword() {
	o.Password.Unset()
}

// GetSharedBy returns the SharedBy field value if set, zero value otherwise.
func (o *SnapshotSharing) GetSharedBy() SnapshotOwner {
	if o == nil || IsNil(o.SharedBy) {
		var ret SnapshotOwner
		return ret
	}
	return *o.SharedBy
}

// GetSharedByOk returns a tuple with the SharedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotSharing) GetSharedByOk() (*SnapshotOwner, bool) {
	if o == nil || IsNil(o.SharedBy) {
		return nil, false
	}
	return o.SharedBy, true
}

// HasSharedBy returns a boolean if a field has been set.
func (o *SnapshotSharing) HasSharedBy() bool {
	if o != nil && !IsNil(o.SharedBy) {
		return true
	}

	return false
}

// SetSharedBy gets a reference to the given SnapshotOwner and assigns it to the SharedBy field.
func (o *SnapshotSharing) SetSharedBy(v SnapshotOwner) {
	o.SharedBy = &v
}

// GetMembers returns the Members field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotSharing) GetMembers() []SnapshotMember {
	if o == nil {
		var ret []SnapshotMember
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotSharing) GetMembersOk() ([]SnapshotMember, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *SnapshotSharing) HasMembers() bool {
	if o != nil && IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []SnapshotMember and assigns it to the Members field.
func (o *SnapshotSharing) SetMembers(v []SnapshotMember) {
	o.Members = v
}

func (o SnapshotSharing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotSharing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sharingType"] = o.SharingType
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if !IsNil(o.SharedBy) {
		toSerialize["sharedBy"] = o.SharedBy
	}
	if o.Members != nil {
		toSerialize["members"] = o.Members
	}
	return toSerialize, nil
}

type NullableSnapshotSharing struct {
	value *SnapshotSharing
	isSet bool
}

func (v NullableSnapshotSharing) Get() *SnapshotSharing {
	return v.value
}

func (v *NullableSnapshotSharing) Set(val *SnapshotSharing) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotSharing) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotSharing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotSharing(val *SnapshotSharing) *NullableSnapshotSharing {
	return &NullableSnapshotSharing{value: val, isSet: true}
}

func (v NullableSnapshotSharing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotSharing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



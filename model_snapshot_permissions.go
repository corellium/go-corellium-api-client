/*
Corellium API

REST API to manage your virtual devices.

API version: 6.0.0-20323
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"encoding/json"
)

// checks if the SnapshotPermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotPermissions{}

// SnapshotPermissions 
type SnapshotPermissions struct {
	// Indicates if snapshot permissions are enabled
	Enabled NullableBool `json:"enabled,omitempty"`
	InvitationTypes *SnapshotInvitationTypes `json:"invitationTypes,omitempty"`
}

// NewSnapshotPermissions instantiates a new SnapshotPermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotPermissions() *SnapshotPermissions {
	this := SnapshotPermissions{}
	return &this
}

// NewSnapshotPermissionsWithDefaults instantiates a new SnapshotPermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotPermissionsWithDefaults() *SnapshotPermissions {
	this := SnapshotPermissions{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotPermissions) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled.Get()) {
		var ret bool
		return ret
	}
	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotPermissions) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// HasEnabled returns a boolean if a field has been set.
func (o *SnapshotPermissions) HasEnabled() bool {
	if o != nil && o.Enabled.IsSet() {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given NullableBool and assigns it to the Enabled field.
func (o *SnapshotPermissions) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}
// SetEnabledNil sets the value for Enabled to be an explicit nil
func (o *SnapshotPermissions) SetEnabledNil() {
	o.Enabled.Set(nil)
}

// UnsetEnabled ensures that no value is present for Enabled, not even an explicit nil
func (o *SnapshotPermissions) UnsetEnabled() {
	o.Enabled.Unset()
}

// GetInvitationTypes returns the InvitationTypes field value if set, zero value otherwise.
func (o *SnapshotPermissions) GetInvitationTypes() SnapshotInvitationTypes {
	if o == nil || IsNil(o.InvitationTypes) {
		var ret SnapshotInvitationTypes
		return ret
	}
	return *o.InvitationTypes
}

// GetInvitationTypesOk returns a tuple with the InvitationTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotPermissions) GetInvitationTypesOk() (*SnapshotInvitationTypes, bool) {
	if o == nil || IsNil(o.InvitationTypes) {
		return nil, false
	}
	return o.InvitationTypes, true
}

// HasInvitationTypes returns a boolean if a field has been set.
func (o *SnapshotPermissions) HasInvitationTypes() bool {
	if o != nil && !IsNil(o.InvitationTypes) {
		return true
	}

	return false
}

// SetInvitationTypes gets a reference to the given SnapshotInvitationTypes and assigns it to the InvitationTypes field.
func (o *SnapshotPermissions) SetInvitationTypes(v SnapshotInvitationTypes) {
	o.InvitationTypes = &v
}

func (o SnapshotPermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotPermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled.IsSet() {
		toSerialize["enabled"] = o.Enabled.Get()
	}
	if !IsNil(o.InvitationTypes) {
		toSerialize["invitationTypes"] = o.InvitationTypes
	}
	return toSerialize, nil
}

type NullableSnapshotPermissions struct {
	value *SnapshotPermissions
	isSet bool
}

func (v NullableSnapshotPermissions) Get() *SnapshotPermissions {
	return v.value
}

func (v *NullableSnapshotPermissions) Set(val *SnapshotPermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotPermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotPermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotPermissions(val *SnapshotPermissions) *NullableSnapshotPermissions {
	return &NullableSnapshotPermissions{value: val, isSet: true}
}

func (v NullableSnapshotPermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotPermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Corellium API

REST API to manage your virtual devices.

API version: 5.5.0-18750
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"encoding/json"
)

// checks if the InstanceUpgradeBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceUpgradeBody{}

// InstanceUpgradeBody 
type InstanceUpgradeBody struct {
	// iOS version
	Os string `json:"os"`
	// (optional) iOS build ID
	Osbuild NullableString `json:"osbuild,omitempty"`
}

// NewInstanceUpgradeBody instantiates a new InstanceUpgradeBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceUpgradeBody(os string) *InstanceUpgradeBody {
	this := InstanceUpgradeBody{}
	this.Os = os
	return &this
}

// NewInstanceUpgradeBodyWithDefaults instantiates a new InstanceUpgradeBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceUpgradeBodyWithDefaults() *InstanceUpgradeBody {
	this := InstanceUpgradeBody{}
	return &this
}

// GetOs returns the Os field value
func (o *InstanceUpgradeBody) GetOs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Os
}

// GetOsOk returns a tuple with the Os field value
// and a boolean to check if the value has been set.
func (o *InstanceUpgradeBody) GetOsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Os, true
}

// SetOs sets field value
func (o *InstanceUpgradeBody) SetOs(v string) {
	o.Os = v
}

// GetOsbuild returns the Osbuild field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceUpgradeBody) GetOsbuild() string {
	if o == nil || IsNil(o.Osbuild.Get()) {
		var ret string
		return ret
	}
	return *o.Osbuild.Get()
}

// GetOsbuildOk returns a tuple with the Osbuild field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceUpgradeBody) GetOsbuildOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Osbuild.Get(), o.Osbuild.IsSet()
}

// HasOsbuild returns a boolean if a field has been set.
func (o *InstanceUpgradeBody) HasOsbuild() bool {
	if o != nil && o.Osbuild.IsSet() {
		return true
	}

	return false
}

// SetOsbuild gets a reference to the given NullableString and assigns it to the Osbuild field.
func (o *InstanceUpgradeBody) SetOsbuild(v string) {
	o.Osbuild.Set(&v)
}
// SetOsbuildNil sets the value for Osbuild to be an explicit nil
func (o *InstanceUpgradeBody) SetOsbuildNil() {
	o.Osbuild.Set(nil)
}

// UnsetOsbuild ensures that no value is present for Osbuild, not even an explicit nil
func (o *InstanceUpgradeBody) UnsetOsbuild() {
	o.Osbuild.Unset()
}

func (o InstanceUpgradeBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceUpgradeBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["os"] = o.Os
	if o.Osbuild.IsSet() {
		toSerialize["osbuild"] = o.Osbuild.Get()
	}
	return toSerialize, nil
}

type NullableInstanceUpgradeBody struct {
	value *InstanceUpgradeBody
	isSet bool
}

func (v NullableInstanceUpgradeBody) Get() *InstanceUpgradeBody {
	return v.value
}

func (v *NullableInstanceUpgradeBody) Set(val *InstanceUpgradeBody) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceUpgradeBody) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceUpgradeBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceUpgradeBody(val *InstanceUpgradeBody) *NullableInstanceUpgradeBody {
	return &NullableInstanceUpgradeBody{value: val, isSet: true}
}

func (v NullableInstanceUpgradeBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceUpgradeBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



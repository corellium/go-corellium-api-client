/*
Corellium API

REST API to manage your virtual devices.

API version: 7.3.0-27831
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"encoding/json"
)

// checks if the TouchCurveInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TouchCurveInput{}

// TouchCurveInput 
type TouchCurveInput struct {
	// Finger Positions
	Start map[string]interface{} `json:"start"`
	// Finger Positions
	End map[string]interface{} `json:"end"`
	// array of per-finger intermediate touch positions, up to 10 depending on model.  Straight line if not defined.
	BezierPoints []map[string]interface{} `json:"bezierPoints,omitempty"`
	// Buttons to be held during this curve.
	StartButtons []TouchInputButtonsInner `json:"startButtons"`
	// Buttons to be left held after this curve.  Same as startButtons if not defined.
	EndButtons []TouchInputButtonsInner `json:"endButtons,omitempty"`
	// true if you want to use normalized x,y coordinates from 0-10000 (eg 5000,5000 is always center of screen)
	Normalized NullableBool `json:"normalized,omitempty"`
	// Duration to wait before this input is executed.  Instant if not defined.
	Wait NullableFloat32 `json:"wait,omitempty"`
	// Duration to execute this curve over.
	Duration float32 `json:"duration"`
}

// NewTouchCurveInput instantiates a new TouchCurveInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTouchCurveInput(start map[string]interface{}, end map[string]interface{}, startButtons []TouchInputButtonsInner, duration float32) *TouchCurveInput {
	this := TouchCurveInput{}
	this.Start = start
	this.End = end
	this.StartButtons = startButtons
	this.Duration = duration
	return &this
}

// NewTouchCurveInputWithDefaults instantiates a new TouchCurveInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTouchCurveInputWithDefaults() *TouchCurveInput {
	this := TouchCurveInput{}
	return &this
}

// GetStart returns the Start field value
func (o *TouchCurveInput) GetStart() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *TouchCurveInput) GetStartOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Start, true
}

// SetStart sets field value
func (o *TouchCurveInput) SetStart(v map[string]interface{}) {
	o.Start = v
}

// GetEnd returns the End field value
func (o *TouchCurveInput) GetEnd() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *TouchCurveInput) GetEndOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.End, true
}

// SetEnd sets field value
func (o *TouchCurveInput) SetEnd(v map[string]interface{}) {
	o.End = v
}

// GetBezierPoints returns the BezierPoints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TouchCurveInput) GetBezierPoints() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.BezierPoints
}

// GetBezierPointsOk returns a tuple with the BezierPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TouchCurveInput) GetBezierPointsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.BezierPoints) {
		return nil, false
	}
	return o.BezierPoints, true
}

// HasBezierPoints returns a boolean if a field has been set.
func (o *TouchCurveInput) HasBezierPoints() bool {
	if o != nil && IsNil(o.BezierPoints) {
		return true
	}

	return false
}

// SetBezierPoints gets a reference to the given []map[string]interface{} and assigns it to the BezierPoints field.
func (o *TouchCurveInput) SetBezierPoints(v []map[string]interface{}) {
	o.BezierPoints = v
}

// GetStartButtons returns the StartButtons field value
func (o *TouchCurveInput) GetStartButtons() []TouchInputButtonsInner {
	if o == nil {
		var ret []TouchInputButtonsInner
		return ret
	}

	return o.StartButtons
}

// GetStartButtonsOk returns a tuple with the StartButtons field value
// and a boolean to check if the value has been set.
func (o *TouchCurveInput) GetStartButtonsOk() ([]TouchInputButtonsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartButtons, true
}

// SetStartButtons sets field value
func (o *TouchCurveInput) SetStartButtons(v []TouchInputButtonsInner) {
	o.StartButtons = v
}

// GetEndButtons returns the EndButtons field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TouchCurveInput) GetEndButtons() []TouchInputButtonsInner {
	if o == nil {
		var ret []TouchInputButtonsInner
		return ret
	}
	return o.EndButtons
}

// GetEndButtonsOk returns a tuple with the EndButtons field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TouchCurveInput) GetEndButtonsOk() ([]TouchInputButtonsInner, bool) {
	if o == nil || IsNil(o.EndButtons) {
		return nil, false
	}
	return o.EndButtons, true
}

// HasEndButtons returns a boolean if a field has been set.
func (o *TouchCurveInput) HasEndButtons() bool {
	if o != nil && IsNil(o.EndButtons) {
		return true
	}

	return false
}

// SetEndButtons gets a reference to the given []TouchInputButtonsInner and assigns it to the EndButtons field.
func (o *TouchCurveInput) SetEndButtons(v []TouchInputButtonsInner) {
	o.EndButtons = v
}

// GetNormalized returns the Normalized field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TouchCurveInput) GetNormalized() bool {
	if o == nil || IsNil(o.Normalized.Get()) {
		var ret bool
		return ret
	}
	return *o.Normalized.Get()
}

// GetNormalizedOk returns a tuple with the Normalized field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TouchCurveInput) GetNormalizedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Normalized.Get(), o.Normalized.IsSet()
}

// HasNormalized returns a boolean if a field has been set.
func (o *TouchCurveInput) HasNormalized() bool {
	if o != nil && o.Normalized.IsSet() {
		return true
	}

	return false
}

// SetNormalized gets a reference to the given NullableBool and assigns it to the Normalized field.
func (o *TouchCurveInput) SetNormalized(v bool) {
	o.Normalized.Set(&v)
}
// SetNormalizedNil sets the value for Normalized to be an explicit nil
func (o *TouchCurveInput) SetNormalizedNil() {
	o.Normalized.Set(nil)
}

// UnsetNormalized ensures that no value is present for Normalized, not even an explicit nil
func (o *TouchCurveInput) UnsetNormalized() {
	o.Normalized.Unset()
}

// GetWait returns the Wait field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TouchCurveInput) GetWait() float32 {
	if o == nil || IsNil(o.Wait.Get()) {
		var ret float32
		return ret
	}
	return *o.Wait.Get()
}

// GetWaitOk returns a tuple with the Wait field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TouchCurveInput) GetWaitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Wait.Get(), o.Wait.IsSet()
}

// HasWait returns a boolean if a field has been set.
func (o *TouchCurveInput) HasWait() bool {
	if o != nil && o.Wait.IsSet() {
		return true
	}

	return false
}

// SetWait gets a reference to the given NullableFloat32 and assigns it to the Wait field.
func (o *TouchCurveInput) SetWait(v float32) {
	o.Wait.Set(&v)
}
// SetWaitNil sets the value for Wait to be an explicit nil
func (o *TouchCurveInput) SetWaitNil() {
	o.Wait.Set(nil)
}

// UnsetWait ensures that no value is present for Wait, not even an explicit nil
func (o *TouchCurveInput) UnsetWait() {
	o.Wait.Unset()
}

// GetDuration returns the Duration field value
func (o *TouchCurveInput) GetDuration() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *TouchCurveInput) GetDurationOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *TouchCurveInput) SetDuration(v float32) {
	o.Duration = v
}

func (o TouchCurveInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TouchCurveInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["start"] = o.Start
	toSerialize["end"] = o.End
	if o.BezierPoints != nil {
		toSerialize["bezierPoints"] = o.BezierPoints
	}
	toSerialize["startButtons"] = o.StartButtons
	if o.EndButtons != nil {
		toSerialize["endButtons"] = o.EndButtons
	}
	if o.Normalized.IsSet() {
		toSerialize["normalized"] = o.Normalized.Get()
	}
	if o.Wait.IsSet() {
		toSerialize["wait"] = o.Wait.Get()
	}
	toSerialize["duration"] = o.Duration
	return toSerialize, nil
}

type NullableTouchCurveInput struct {
	value *TouchCurveInput
	isSet bool
}

func (v NullableTouchCurveInput) Get() *TouchCurveInput {
	return v.value
}

func (v *NullableTouchCurveInput) Set(val *TouchCurveInput) {
	v.value = val
	v.isSet = true
}

func (v NullableTouchCurveInput) IsSet() bool {
	return v.isSet
}

func (v *NullableTouchCurveInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTouchCurveInput(val *TouchCurveInput) *NullableTouchCurveInput {
	return &NullableTouchCurveInput{value: val, isSet: true}
}

func (v NullableTouchCurveInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTouchCurveInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Corellium API

REST API to manage your virtual devices.

API version: 7.0.0-25053
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"encoding/json"
)

// checks if the V1CheckSubdomainExistenceParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1CheckSubdomainExistenceParameters{}

// V1CheckSubdomainExistenceParameters 
type V1CheckSubdomainExistenceParameters struct {
	// Domain to check
	Domain string `json:"domain"`
}

// NewV1CheckSubdomainExistenceParameters instantiates a new V1CheckSubdomainExistenceParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1CheckSubdomainExistenceParameters(domain string) *V1CheckSubdomainExistenceParameters {
	this := V1CheckSubdomainExistenceParameters{}
	this.Domain = domain
	return &this
}

// NewV1CheckSubdomainExistenceParametersWithDefaults instantiates a new V1CheckSubdomainExistenceParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1CheckSubdomainExistenceParametersWithDefaults() *V1CheckSubdomainExistenceParameters {
	this := V1CheckSubdomainExistenceParameters{}
	return &this
}

// GetDomain returns the Domain field value
func (o *V1CheckSubdomainExistenceParameters) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *V1CheckSubdomainExistenceParameters) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *V1CheckSubdomainExistenceParameters) SetDomain(v string) {
	o.Domain = v
}

func (o V1CheckSubdomainExistenceParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1CheckSubdomainExistenceParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domain"] = o.Domain
	return toSerialize, nil
}

type NullableV1CheckSubdomainExistenceParameters struct {
	value *V1CheckSubdomainExistenceParameters
	isSet bool
}

func (v NullableV1CheckSubdomainExistenceParameters) Get() *V1CheckSubdomainExistenceParameters {
	return v.value
}

func (v *NullableV1CheckSubdomainExistenceParameters) Set(val *V1CheckSubdomainExistenceParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableV1CheckSubdomainExistenceParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableV1CheckSubdomainExistenceParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1CheckSubdomainExistenceParameters(val *V1CheckSubdomainExistenceParameters) *NullableV1CheckSubdomainExistenceParameters {
	return &NullableV1CheckSubdomainExistenceParameters{value: val, isSet: true}
}

func (v NullableV1CheckSubdomainExistenceParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1CheckSubdomainExistenceParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



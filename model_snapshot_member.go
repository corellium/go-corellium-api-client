/*
Corellium API

REST API to manage your virtual devices.

API version: 6.5.0-24034
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"encoding/json"
)

// checks if the SnapshotMember type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotMember{}

// SnapshotMember 
type SnapshotMember struct {
	// The email of the member
	Email string `json:"email"`
	// The date when the invite was sent
	InviteSentAt float32 `json:"inviteSentAt"`
	// UNIX Date of when the snapshot was first shared with member
	SharedOn float32 `json:"sharedOn"`
	// The member's user ID
	UserId NullableString `json:"userId,omitempty"`
	// The user's label or name
	Label NullableString `json:"label,omitempty"`
}

// NewSnapshotMember instantiates a new SnapshotMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotMember(email string, inviteSentAt float32, sharedOn float32) *SnapshotMember {
	this := SnapshotMember{}
	this.Email = email
	this.InviteSentAt = inviteSentAt
	this.SharedOn = sharedOn
	return &this
}

// NewSnapshotMemberWithDefaults instantiates a new SnapshotMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotMemberWithDefaults() *SnapshotMember {
	this := SnapshotMember{}
	return &this
}

// GetEmail returns the Email field value
func (o *SnapshotMember) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *SnapshotMember) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *SnapshotMember) SetEmail(v string) {
	o.Email = v
}

// GetInviteSentAt returns the InviteSentAt field value
func (o *SnapshotMember) GetInviteSentAt() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.InviteSentAt
}

// GetInviteSentAtOk returns a tuple with the InviteSentAt field value
// and a boolean to check if the value has been set.
func (o *SnapshotMember) GetInviteSentAtOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InviteSentAt, true
}

// SetInviteSentAt sets field value
func (o *SnapshotMember) SetInviteSentAt(v float32) {
	o.InviteSentAt = v
}

// GetSharedOn returns the SharedOn field value
func (o *SnapshotMember) GetSharedOn() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SharedOn
}

// GetSharedOnOk returns a tuple with the SharedOn field value
// and a boolean to check if the value has been set.
func (o *SnapshotMember) GetSharedOnOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SharedOn, true
}

// SetSharedOn sets field value
func (o *SnapshotMember) SetSharedOn(v float32) {
	o.SharedOn = v
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotMember) GetUserId() string {
	if o == nil || IsNil(o.UserId.Get()) {
		var ret string
		return ret
	}
	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotMember) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// HasUserId returns a boolean if a field has been set.
func (o *SnapshotMember) HasUserId() bool {
	if o != nil && o.UserId.IsSet() {
		return true
	}

	return false
}

// SetUserId gets a reference to the given NullableString and assigns it to the UserId field.
func (o *SnapshotMember) SetUserId(v string) {
	o.UserId.Set(&v)
}
// SetUserIdNil sets the value for UserId to be an explicit nil
func (o *SnapshotMember) SetUserIdNil() {
	o.UserId.Set(nil)
}

// UnsetUserId ensures that no value is present for UserId, not even an explicit nil
func (o *SnapshotMember) UnsetUserId() {
	o.UserId.Unset()
}

// GetLabel returns the Label field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotMember) GetLabel() string {
	if o == nil || IsNil(o.Label.Get()) {
		var ret string
		return ret
	}
	return *o.Label.Get()
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotMember) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Label.Get(), o.Label.IsSet()
}

// HasLabel returns a boolean if a field has been set.
func (o *SnapshotMember) HasLabel() bool {
	if o != nil && o.Label.IsSet() {
		return true
	}

	return false
}

// SetLabel gets a reference to the given NullableString and assigns it to the Label field.
func (o *SnapshotMember) SetLabel(v string) {
	o.Label.Set(&v)
}
// SetLabelNil sets the value for Label to be an explicit nil
func (o *SnapshotMember) SetLabelNil() {
	o.Label.Set(nil)
}

// UnsetLabel ensures that no value is present for Label, not even an explicit nil
func (o *SnapshotMember) UnsetLabel() {
	o.Label.Unset()
}

func (o SnapshotMember) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotMember) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["inviteSentAt"] = o.InviteSentAt
	toSerialize["sharedOn"] = o.SharedOn
	if o.UserId.IsSet() {
		toSerialize["userId"] = o.UserId.Get()
	}
	if o.Label.IsSet() {
		toSerialize["label"] = o.Label.Get()
	}
	return toSerialize, nil
}

type NullableSnapshotMember struct {
	value *SnapshotMember
	isSet bool
}

func (v NullableSnapshotMember) Get() *SnapshotMember {
	return v.value
}

func (v *NullableSnapshotMember) Set(val *SnapshotMember) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotMember) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotMember(val *SnapshotMember) *NullableSnapshotMember {
	return &NullableSnapshotMember{value: val, isSet: true}
}

func (v NullableSnapshotMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



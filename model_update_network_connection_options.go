/*
Corellium API

REST API to manage your virtual devices.

API version: 7.1.0-26108
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"encoding/json"
)

// checks if the UpdateNetworkConnectionOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateNetworkConnectionOptions{}

// UpdateNetworkConnectionOptions 
type UpdateNetworkConnectionOptions struct {
	// User specified name for this network connection. e.g. My Network Connection
	Name string `json:"name"`
	// An object containing network connection configuration data. Will vary based on network provider type. See examples.
	Config map[string]interface{} `json:"config,omitempty"`
}

// NewUpdateNetworkConnectionOptions instantiates a new UpdateNetworkConnectionOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateNetworkConnectionOptions(name string) *UpdateNetworkConnectionOptions {
	this := UpdateNetworkConnectionOptions{}
	this.Name = name
	return &this
}

// NewUpdateNetworkConnectionOptionsWithDefaults instantiates a new UpdateNetworkConnectionOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateNetworkConnectionOptionsWithDefaults() *UpdateNetworkConnectionOptions {
	this := UpdateNetworkConnectionOptions{}
	return &this
}

// GetName returns the Name field value
func (o *UpdateNetworkConnectionOptions) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateNetworkConnectionOptions) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateNetworkConnectionOptions) SetName(v string) {
	o.Name = v
}

// GetConfig returns the Config field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateNetworkConnectionOptions) GetConfig() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateNetworkConnectionOptions) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Config) {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *UpdateNetworkConnectionOptions) HasConfig() bool {
	if o != nil && IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *UpdateNetworkConnectionOptions) SetConfig(v map[string]interface{}) {
	o.Config = v
}

func (o UpdateNetworkConnectionOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateNetworkConnectionOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	return toSerialize, nil
}

type NullableUpdateNetworkConnectionOptions struct {
	value *UpdateNetworkConnectionOptions
	isSet bool
}

func (v NullableUpdateNetworkConnectionOptions) Get() *UpdateNetworkConnectionOptions {
	return v.value
}

func (v *NullableUpdateNetworkConnectionOptions) Set(val *UpdateNetworkConnectionOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateNetworkConnectionOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateNetworkConnectionOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateNetworkConnectionOptions(val *UpdateNetworkConnectionOptions) *NullableUpdateNetworkConnectionOptions {
	return &NullableUpdateNetworkConnectionOptions{value: val, isSet: true}
}

func (v NullableUpdateNetworkConnectionOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateNetworkConnectionOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



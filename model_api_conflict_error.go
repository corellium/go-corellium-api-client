/*
Corellium API

REST API to manage your virtual devices.

API version: 5.5.0-18750
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"encoding/json"
)

// checks if the ApiConflictError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiConflictError{}

// ApiConflictError 
type ApiConflictError struct {
	// Error text
	Error string `json:"error"`
	// Error ID
	ErrorID string `json:"errorID"`
	// Object that is conflicted with
	Object map[string]interface{} `json:"object,omitempty"`
}

// NewApiConflictError instantiates a new ApiConflictError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiConflictError(error_ string, errorID string) *ApiConflictError {
	this := ApiConflictError{}
	this.Error = error_
	this.ErrorID = errorID
	return &this
}

// NewApiConflictErrorWithDefaults instantiates a new ApiConflictError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiConflictErrorWithDefaults() *ApiConflictError {
	this := ApiConflictError{}
	return &this
}

// GetError returns the Error field value
func (o *ApiConflictError) GetError() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *ApiConflictError) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *ApiConflictError) SetError(v string) {
	o.Error = v
}

// GetErrorID returns the ErrorID field value
func (o *ApiConflictError) GetErrorID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorID
}

// GetErrorIDOk returns a tuple with the ErrorID field value
// and a boolean to check if the value has been set.
func (o *ApiConflictError) GetErrorIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorID, true
}

// SetErrorID sets field value
func (o *ApiConflictError) SetErrorID(v string) {
	o.ErrorID = v
}

// GetObject returns the Object field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiConflictError) GetObject() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiConflictError) GetObjectOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Object) {
		return map[string]interface{}{}, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *ApiConflictError) HasObject() bool {
	if o != nil && IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given map[string]interface{} and assigns it to the Object field.
func (o *ApiConflictError) SetObject(v map[string]interface{}) {
	o.Object = v
}

func (o ApiConflictError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiConflictError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["error"] = o.Error
	toSerialize["errorID"] = o.ErrorID
	if o.Object != nil {
		toSerialize["object"] = o.Object
	}
	return toSerialize, nil
}

type NullableApiConflictError struct {
	value *ApiConflictError
	isSet bool
}

func (v NullableApiConflictError) Get() *ApiConflictError {
	return v.value
}

func (v *NullableApiConflictError) Set(val *ApiConflictError) {
	v.value = val
	v.isSet = true
}

func (v NullableApiConflictError) IsSet() bool {
	return v.isSet
}

func (v *NullableApiConflictError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiConflictError(val *ApiConflictError) *NullableApiConflictError {
	return &NullableApiConflictError{value: val, isSet: true}
}

func (v NullableApiConflictError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiConflictError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Corellium API

REST API to manage your virtual devices.

API version: 5.5.0-18750
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"encoding/json"
)

// checks if the InstanceStopOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceStopOptions{}

// InstanceStopOptions 
type InstanceStopOptions struct {
	// Request VM OS power down
	Soft NullableBool `json:"soft,omitempty"`
}

// NewInstanceStopOptions instantiates a new InstanceStopOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceStopOptions() *InstanceStopOptions {
	this := InstanceStopOptions{}
	return &this
}

// NewInstanceStopOptionsWithDefaults instantiates a new InstanceStopOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceStopOptionsWithDefaults() *InstanceStopOptions {
	this := InstanceStopOptions{}
	return &this
}

// GetSoft returns the Soft field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceStopOptions) GetSoft() bool {
	if o == nil || IsNil(o.Soft.Get()) {
		var ret bool
		return ret
	}
	return *o.Soft.Get()
}

// GetSoftOk returns a tuple with the Soft field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceStopOptions) GetSoftOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Soft.Get(), o.Soft.IsSet()
}

// HasSoft returns a boolean if a field has been set.
func (o *InstanceStopOptions) HasSoft() bool {
	if o != nil && o.Soft.IsSet() {
		return true
	}

	return false
}

// SetSoft gets a reference to the given NullableBool and assigns it to the Soft field.
func (o *InstanceStopOptions) SetSoft(v bool) {
	o.Soft.Set(&v)
}
// SetSoftNil sets the value for Soft to be an explicit nil
func (o *InstanceStopOptions) SetSoftNil() {
	o.Soft.Set(nil)
}

// UnsetSoft ensures that no value is present for Soft, not even an explicit nil
func (o *InstanceStopOptions) UnsetSoft() {
	o.Soft.Unset()
}

func (o InstanceStopOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceStopOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Soft.IsSet() {
		toSerialize["soft"] = o.Soft.Get()
	}
	return toSerialize, nil
}

type NullableInstanceStopOptions struct {
	value *InstanceStopOptions
	isSet bool
}

func (v NullableInstanceStopOptions) Get() *InstanceStopOptions {
	return v.value
}

func (v *NullableInstanceStopOptions) Set(val *InstanceStopOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceStopOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceStopOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceStopOptions(val *InstanceStopOptions) *NullableInstanceStopOptions {
	return &NullableInstanceStopOptions{value: val, isSet: true}
}

func (v NullableInstanceStopOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceStopOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



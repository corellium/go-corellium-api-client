/*
Corellium API

REST API to manage your virtual devices.

API version: 5.5.0-18750
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"encoding/json"
)

// checks if the GpioStateDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GpioStateDefinition{}

// GpioStateDefinition 
type GpioStateDefinition struct {
	// count of bits in members of this bank
	BitCount float32 `json:"bitCount"`
	// bits for each bank of this name as an array of arrays
	Banks [][]Bit `json:"banks"`
}

// NewGpioStateDefinition instantiates a new GpioStateDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGpioStateDefinition(bitCount float32, banks [][]Bit) *GpioStateDefinition {
	this := GpioStateDefinition{}
	this.BitCount = bitCount
	this.Banks = banks
	return &this
}

// NewGpioStateDefinitionWithDefaults instantiates a new GpioStateDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGpioStateDefinitionWithDefaults() *GpioStateDefinition {
	this := GpioStateDefinition{}
	return &this
}

// GetBitCount returns the BitCount field value
func (o *GpioStateDefinition) GetBitCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BitCount
}

// GetBitCountOk returns a tuple with the BitCount field value
// and a boolean to check if the value has been set.
func (o *GpioStateDefinition) GetBitCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BitCount, true
}

// SetBitCount sets field value
func (o *GpioStateDefinition) SetBitCount(v float32) {
	o.BitCount = v
}

// GetBanks returns the Banks field value
func (o *GpioStateDefinition) GetBanks() [][]Bit {
	if o == nil {
		var ret [][]Bit
		return ret
	}

	return o.Banks
}

// GetBanksOk returns a tuple with the Banks field value
// and a boolean to check if the value has been set.
func (o *GpioStateDefinition) GetBanksOk() ([][]Bit, bool) {
	if o == nil {
		return nil, false
	}
	return o.Banks, true
}

// SetBanks sets field value
func (o *GpioStateDefinition) SetBanks(v [][]Bit) {
	o.Banks = v
}

func (o GpioStateDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GpioStateDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bitCount"] = o.BitCount
	toSerialize["banks"] = o.Banks
	return toSerialize, nil
}

type NullableGpioStateDefinition struct {
	value *GpioStateDefinition
	isSet bool
}

func (v NullableGpioStateDefinition) Get() *GpioStateDefinition {
	return v.value
}

func (v *NullableGpioStateDefinition) Set(val *GpioStateDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableGpioStateDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableGpioStateDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGpioStateDefinition(val *GpioStateDefinition) *NullableGpioStateDefinition {
	return &NullableGpioStateDefinition{value: val, isSet: true}
}

func (v NullableGpioStateDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGpioStateDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



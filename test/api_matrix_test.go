/*
Corellium API

Testing MatrixApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package corellium

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/corellium/go-corellium-api-client"
)

func Test_corellium_MatrixApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MatrixApiService CreateAssessment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.MatrixApi.CreateAssessment(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MatrixApiService DeleteAssessment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var assessmentId string

		httpRes, err := apiClient.MatrixApi.DeleteAssessment(context.Background(), instanceId, assessmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MatrixApiService DownloadReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var assessmentId string

		resp, httpRes, err := apiClient.MatrixApi.DownloadReport(context.Background(), instanceId, assessmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MatrixApiService GetAssessmentById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var assessmentId string

		resp, httpRes, err := apiClient.MatrixApi.GetAssessmentById(context.Background(), instanceId, assessmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MatrixApiService GetAssessmentsByInstanceId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.MatrixApi.GetAssessmentsByInstanceId(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MatrixApiService RunTests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var assessmentId string

		resp, httpRes, err := apiClient.MatrixApi.RunTests(context.Background(), instanceId, assessmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MatrixApiService StartMonitoring", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var assessmentId string

		httpRes, err := apiClient.MatrixApi.StartMonitoring(context.Background(), instanceId, assessmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MatrixApiService StopMonitoring", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var assessmentId string

		httpRes, err := apiClient.MatrixApi.StopMonitoring(context.Background(), instanceId, assessmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

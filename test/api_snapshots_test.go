/*
Corellium API

Testing SnapshotsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package corellium

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/corellium/go-corellium-api-client"
)

func Test_corellium_SnapshotsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SnapshotsApiService V1CreateSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.SnapshotsApi.V1CreateSnapshot(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SnapshotsApiService V1DeleteInstanceSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var snapshotId string

		httpRes, err := apiClient.SnapshotsApi.V1DeleteInstanceSnapshot(context.Background(), instanceId, snapshotId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SnapshotsApiService V1DeleteSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var snapshotId string

		httpRes, err := apiClient.SnapshotsApi.V1DeleteSnapshot(context.Background(), snapshotId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SnapshotsApiService V1GetInstanceSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var snapshotId string

		resp, httpRes, err := apiClient.SnapshotsApi.V1GetInstanceSnapshot(context.Background(), instanceId, snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SnapshotsApiService V1GetInstanceSnapshots", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.SnapshotsApi.V1GetInstanceSnapshots(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SnapshotsApiService V1GetSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var snapshotId string

		resp, httpRes, err := apiClient.SnapshotsApi.V1GetSnapshot(context.Background(), snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SnapshotsApiService V1RenameInstanceSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var snapshotId string

		resp, httpRes, err := apiClient.SnapshotsApi.V1RenameInstanceSnapshot(context.Background(), instanceId, snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SnapshotsApiService V1RestoreInstanceSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var snapshotId string

		httpRes, err := apiClient.SnapshotsApi.V1RestoreInstanceSnapshot(context.Background(), instanceId, snapshotId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SnapshotsApiService V1SnapshotRename", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var snapshotId string

		resp, httpRes, err := apiClient.SnapshotsApi.V1SnapshotRename(context.Background(), snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

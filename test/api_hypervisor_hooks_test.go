/*
Corellium API

Testing HypervisorHooksApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package corellium

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/corellium/go-corellium-api-client"
)

func Test_corellium_HypervisorHooksApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HypervisorHooksApiService V1ClearHyperTraceHooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.HypervisorHooksApi.V1ClearHyperTraceHooks(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorHooksApiService V1CreateHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.HypervisorHooksApi.V1CreateHook(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorHooksApiService V1DeleteHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hookId string

		httpRes, err := apiClient.HypervisorHooksApi.V1DeleteHook(context.Background(), hookId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorHooksApiService V1ExecuteHyperTraceHooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.HypervisorHooksApi.V1ExecuteHyperTraceHooks(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorHooksApiService V1GetHookById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hookId string

		resp, httpRes, err := apiClient.HypervisorHooksApi.V1GetHookById(context.Background(), hookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorHooksApiService V1GetHooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.HypervisorHooksApi.V1GetHooks(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorHooksApiService V1UpdateHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hookId string

		resp, httpRes, err := apiClient.HypervisorHooksApi.V1UpdateHook(context.Background(), hookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

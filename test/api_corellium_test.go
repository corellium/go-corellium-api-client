/*
Corellium API

Testing CorelliumApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package corellium

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/corellium/go-corellium-api-client"
)

func Test_corellium_CorelliumApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CorelliumApiService CreateAssessment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.CreateAssessment(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService DeleteAssessment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var assessmentId string

		httpRes, err := apiClient.CorelliumApi.DeleteAssessment(context.Background(), instanceId, assessmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService DownloadReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var assessmentId string

		resp, httpRes, err := apiClient.CorelliumApi.DownloadReport(context.Background(), instanceId, assessmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService GetAssessmentById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var assessmentId string

		resp, httpRes, err := apiClient.CorelliumApi.GetAssessmentById(context.Background(), instanceId, assessmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService GetAssessmentsByInstanceId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.GetAssessmentsByInstanceId(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService RunTests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var assessmentId string

		resp, httpRes, err := apiClient.CorelliumApi.RunTests(context.Background(), instanceId, assessmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService StartMonitoring", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var assessmentId string

		httpRes, err := apiClient.CorelliumApi.StartMonitoring(context.Background(), instanceId, assessmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService StopMonitoring", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var assessmentId string

		httpRes, err := apiClient.CorelliumApi.StopMonitoring(context.Background(), instanceId, assessmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AcceptSharedSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1AcceptSharedSnapshot(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1ActivityExport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1ActivityExport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1ActivityList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1ActivityList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AddProjectKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.CorelliumApi.V1AddProjectKey(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AddTeamRoleToProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var teamId string
		var roleId string

		httpRes, err := apiClient.CorelliumApi.V1AddTeamRoleToProject(context.Background(), projectId, teamId, roleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AddUserRoleToProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var userId string
		var roleId string

		httpRes, err := apiClient.CorelliumApi.V1AddUserRoleToProject(context.Background(), projectId, userId, roleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AddUserToTeam", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var teamId string
		var userId string

		httpRes, err := apiClient.CorelliumApi.V1AddUserToTeam(context.Background(), teamId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentAppReady", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1AgentAppReady(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentDeleteFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var filePath string

		httpRes, err := apiClient.CorelliumApi.V1AgentDeleteFile(context.Background(), instanceId, filePath).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentGetFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var filePath string

		resp, httpRes, err := apiClient.CorelliumApi.V1AgentGetFile(context.Background(), instanceId, filePath).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentGetTempFilename", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1AgentGetTempFilename(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentInstallApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1AgentInstallApp(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentInstallProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1AgentInstallProfile(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentKillApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var bundleId string

		resp, httpRes, err := apiClient.CorelliumApi.V1AgentKillApp(context.Background(), instanceId, bundleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentListAppIcons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1AgentListAppIcons(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentListApps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1AgentListApps(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentListAppsStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1AgentListAppsStatus(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentListProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1AgentListProfiles(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentRunApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var bundleId string

		resp, httpRes, err := apiClient.CorelliumApi.V1AgentRunApp(context.Background(), instanceId, bundleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentSetFileAttributes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var filePath string

		httpRes, err := apiClient.CorelliumApi.V1AgentSetFileAttributes(context.Background(), instanceId, filePath).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentSystemGetAdbAuth", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1AgentSystemGetAdbAuth(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentSystemGetNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1AgentSystemGetNetwork(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentSystemGetProp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1AgentSystemGetProp(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentSystemInstallOpenGApps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1AgentSystemInstallOpenGApps(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentSystemLock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1AgentSystemLock(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentSystemSetAdbAuth", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1AgentSystemSetAdbAuth(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentSystemSetHostname", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1AgentSystemSetHostname(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentSystemShutdown", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1AgentSystemShutdown(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentSystemUnlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1AgentSystemUnlock(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentUninstallApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var bundleId string

		resp, httpRes, err := apiClient.CorelliumApi.V1AgentUninstallApp(context.Background(), instanceId, bundleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentUninstallProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var profileId string

		httpRes, err := apiClient.CorelliumApi.V1AgentUninstallProfile(context.Background(), instanceId, profileId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AgentUploadFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var filePath string

		httpRes, err := apiClient.CorelliumApi.V1AgentUploadFile(context.Background(), instanceId, filePath).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1AuthLogin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1AuthLogin(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1BtracePreauthorize", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1BtracePreauthorize(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1CheckSubdomainExistence", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1CheckSubdomainExistence(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1ClearCoreTrace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1ClearCoreTrace(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1ClearHyperTrace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1ClearHyperTrace(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1ClearHyperTraceHooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1ClearHyperTraceHooks(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1ClearInstancePanics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1ClearInstancePanics(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1CreateDomainAuthProvider", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domainId string

		resp, httpRes, err := apiClient.CorelliumApi.V1CreateDomainAuthProvider(context.Background(), domainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1CreateHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1CreateHook(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1CreateImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1CreateImage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1CreateInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1CreateInstance(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1CreateNetworkConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1CreateNetworkConnection(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1CreateProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1CreateProject(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1CreateSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1CreateSnapshot(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1CreateUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1CreateUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1DeleteDomainAuthProvider", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domainId string
		var providerId string

		resp, httpRes, err := apiClient.CorelliumApi.V1DeleteDomainAuthProvider(context.Background(), domainId, providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1DeleteExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionId string

		httpRes, err := apiClient.CorelliumApi.V1DeleteExtension(context.Background(), extensionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1DeleteHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hookId string

		httpRes, err := apiClient.CorelliumApi.V1DeleteHook(context.Background(), hookId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1DeleteImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var imageId string

		httpRes, err := apiClient.CorelliumApi.V1DeleteImage(context.Background(), imageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1DeleteInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1DeleteInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1DeleteInstanceSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var snapshotId string

		httpRes, err := apiClient.CorelliumApi.V1DeleteInstanceSnapshot(context.Background(), instanceId, snapshotId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1DeleteNetworkConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.CorelliumApi.V1DeleteNetworkConnection(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1DeleteProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		httpRes, err := apiClient.CorelliumApi.V1DeleteProject(context.Background(), projectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1DeleteSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var snapshotId string

		httpRes, err := apiClient.CorelliumApi.V1DeleteSnapshot(context.Background(), snapshotId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1DeleteSnapshotPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var snapshotId string

		resp, httpRes, err := apiClient.CorelliumApi.V1DeleteSnapshotPermissions(context.Background(), snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1DeleteUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.CorelliumApi.V1DeleteUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1DisableExposePort", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1DisableExposePort(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1DownloadActivity", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		resp, httpRes, err := apiClient.CorelliumApi.V1DownloadActivity(context.Background(), taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1EnableExposePort", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1EnableExposePort(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1ExecuteHyperTraceHooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1ExecuteHyperTraceHooks(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetActivityExportStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetActivityExportStatus(context.Background(), taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetActivityExportTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1GetActivityExportTasks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1GetConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetDomainAuthProviders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domainId string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetDomainAuthProviders(context.Background(), domainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetExtensionById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionId string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetExtensionById(context.Background(), extensionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetExtensions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1GetExtensions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetHookById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hookId string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetHookById(context.Background(), hookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetHooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetHooks(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var imageId string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetImage(context.Background(), imageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetImages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1GetImages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetInstanceConsole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetInstanceConsole(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetInstanceConsoleLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetInstanceConsoleLog(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetInstanceGpios", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetInstanceGpios(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetInstancePanics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetInstancePanics(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetInstancePeripherals", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetInstancePeripherals(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetInstanceScreenshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var format string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetInstanceScreenshot(context.Background(), instanceId, format).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetInstanceSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var snapshotId string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetInstanceSnapshot(context.Background(), instanceId, snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetInstanceSnapshots", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetInstanceSnapshots(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetInstances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1GetInstances(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetModelSoftware", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var model string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetModelSoftware(context.Background(), model).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetModels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1GetModels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetNetworkConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetNetworkConnection(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetProject(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetProjectInstances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetProjectInstances(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetProjectKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetProjectKeys(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetProjectNetworkLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetProjectNetworkLog(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetProjectNetworkStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetProjectNetworkStatus(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetProjectVpnConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var format string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetProjectVpnConfig(context.Background(), projectId, format).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetProjects", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1GetProjects(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetResetLinkInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1GetResetLinkInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetSharedSnapshots", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1GetSharedSnapshots(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1GetSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var snapshotId string

		resp, httpRes, err := apiClient.CorelliumApi.V1GetSnapshot(context.Background(), snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1InstancesInstanceIdMessagePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1InstancesInstanceIdMessagePost(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1InstancesInstanceIdNetdumpPcapGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1InstancesInstanceIdNetdumpPcapGet(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1InstancesInstanceIdNetworkMonitorPcapGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1InstancesInstanceIdNetworkMonitorPcapGet(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1Kcrange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1Kcrange(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1ListNetworkConnections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1ListNetworkConnections(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1ListNetworkInterfaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1ListNetworkInterfaces(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1ListNetworkProviders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1ListNetworkProviders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1ListThreads", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1ListThreads(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1LoadExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1LoadExtension(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1MediaPlay", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1MediaPlay(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1MediaStop", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1MediaStop(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1ParseExtensionJson", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1ParseExtensionJson(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1PartialUpdateNetworkConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.CorelliumApi.V1PartialUpdateNetworkConnection(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1PatchInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1PatchInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1PatchInstanceReadOnly", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1PatchInstanceReadOnly(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1PauseInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1PauseInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1PostInstanceInput", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1PostInstanceInput(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1Ready", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CorelliumApi.V1Ready(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1RebootInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1RebootInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1RemoveProjectKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var keyId string

		httpRes, err := apiClient.CorelliumApi.V1RemoveProjectKey(context.Background(), projectId, keyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1RemoveTeamRoleFromProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var teamId string
		var roleId string

		httpRes, err := apiClient.CorelliumApi.V1RemoveTeamRoleFromProject(context.Background(), projectId, teamId, roleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1RemoveUserFromTeam", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var teamId string
		var userId string

		httpRes, err := apiClient.CorelliumApi.V1RemoveUserFromTeam(context.Background(), teamId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1RemoveUserRoleFromProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var userId string
		var roleId string

		httpRes, err := apiClient.CorelliumApi.V1RemoveUserRoleFromProject(context.Background(), projectId, userId, roleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1RenameInstanceSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var snapshotId string

		resp, httpRes, err := apiClient.CorelliumApi.V1RenameInstanceSnapshot(context.Background(), instanceId, snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1ResetUserPassword", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CorelliumApi.V1ResetUserPassword(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1RestoreBackup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1RestoreBackup(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1RestoreInstanceSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var snapshotId string

		httpRes, err := apiClient.CorelliumApi.V1RestoreInstanceSnapshot(context.Background(), instanceId, snapshotId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1Roles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1Roles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1RotateInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1RotateInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1SendUserResetLink", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CorelliumApi.V1SendUserResetLink(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1SetInstanceGpios", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1SetInstanceGpios(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1SetInstancePeripherals", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V1SetInstancePeripherals(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1SetInstanceState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1SetInstanceState(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1SetSnapshotPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var snapshotId string

		resp, httpRes, err := apiClient.CorelliumApi.V1SetSnapshotPermissions(context.Background(), snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1ShareSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var snapshotId string

		resp, httpRes, err := apiClient.CorelliumApi.V1ShareSnapshot(context.Background(), snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1SnapshotRename", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var snapshotId string

		resp, httpRes, err := apiClient.CorelliumApi.V1SnapshotRename(context.Background(), snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1StartCoreTrace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1StartCoreTrace(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1StartHyperTrace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1StartHyperTrace(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1StartInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1StartInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1StartNetdump", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1StartNetdump(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1StartNetworkMonitor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1StartNetworkMonitor(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1StopCoreTrace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1StopCoreTrace(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1StopHyperTrace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1StopHyperTrace(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1StopInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1StopInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1StopNetdump", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1StopNetdump(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1StopNetworkMonitor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1StopNetworkMonitor(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1TeamChange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var teamId string

		httpRes, err := apiClient.CorelliumApi.V1TeamChange(context.Background(), teamId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1TeamCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1TeamCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1TeamDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var teamId string

		httpRes, err := apiClient.CorelliumApi.V1TeamDelete(context.Background(), teamId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1Teams", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1Teams(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1UnpauseInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1UnpauseInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1UpdateDomainAuthProvider", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domainId string
		var providerId string

		resp, httpRes, err := apiClient.CorelliumApi.V1UpdateDomainAuthProvider(context.Background(), domainId, providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1UpdateExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionId string

		httpRes, err := apiClient.CorelliumApi.V1UpdateExtension(context.Background(), extensionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1UpdateHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hookId string

		resp, httpRes, err := apiClient.CorelliumApi.V1UpdateHook(context.Background(), hookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1UpdateNetworkConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.CorelliumApi.V1UpdateNetworkConnection(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1UpdateProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.CorelliumApi.V1UpdateProject(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1UpdateProjectSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		httpRes, err := apiClient.CorelliumApi.V1UpdateProjectSettings(context.Background(), projectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1UpdateUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.CorelliumApi.V1UpdateUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1UpgradeInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.CorelliumApi.V1UpgradeInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1UploadImageData", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var imageId string

		resp, httpRes, err := apiClient.CorelliumApi.V1UploadImageData(context.Background(), imageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1UserAgreeTerms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1UserAgreeTerms(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1UsersChangePasswordPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CorelliumApi.V1UsersChangePasswordPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1UsersLogin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1UsersLogin(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1WebPlayerAllowedDomains", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CorelliumApi.V1WebPlayerAllowedDomains(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1WebPlayerCreateSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1WebPlayerCreateSession(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1WebPlayerDestroySession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionId string

		resp, httpRes, err := apiClient.CorelliumApi.V1WebPlayerDestroySession(context.Background(), sessionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1WebPlayerListSessions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CorelliumApi.V1WebPlayerListSessions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V1WebPlayerSessionInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionId string

		resp, httpRes, err := apiClient.CorelliumApi.V1WebPlayerSessionInfo(context.Background(), sessionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V2GetInstanceQuickConnectCommand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V2GetInstanceQuickConnectCommand(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorelliumApiService V2GetInstanceState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.CorelliumApi.V2GetInstanceState(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

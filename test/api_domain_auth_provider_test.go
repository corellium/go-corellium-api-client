/*
Corellium API

Testing DomainAuthProviderApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package corellium

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/corellium/go-corellium-api-client"
)

func Test_corellium_DomainAuthProviderApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DomainAuthProviderApiService V1CreateDomainAuthProvider", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domainId string

		resp, httpRes, err := apiClient.DomainAuthProviderApi.V1CreateDomainAuthProvider(context.Background(), domainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainAuthProviderApiService V1DeleteDomainAuthProvider", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domainId string
		var providerId string

		resp, httpRes, err := apiClient.DomainAuthProviderApi.V1DeleteDomainAuthProvider(context.Background(), domainId, providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainAuthProviderApiService V1GetDomainAuthProviders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domainId string

		resp, httpRes, err := apiClient.DomainAuthProviderApi.V1GetDomainAuthProviders(context.Background(), domainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainAuthProviderApiService V1UpdateDomainAuthProvider", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domainId string
		var providerId string

		resp, httpRes, err := apiClient.DomainAuthProviderApi.V1UpdateDomainAuthProvider(context.Background(), domainId, providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

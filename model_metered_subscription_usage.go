/*
Corellium API

REST API to manage your virtual devices.

API version: 6.6.0-24071
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"encoding/json"
)

// checks if the MeteredSubscriptionUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeteredSubscriptionUsage{}

// MeteredSubscriptionUsage 
type MeteredSubscriptionUsage struct {
	// Unit price
	BurstRate NullableFloat32 `json:"burst_rate,omitempty"`
	// Allocated hours
	AllocatedHours NullableFloat32 `json:"allocated_hours,omitempty"`
	// Plan cost
	PlanBilledAmount NullableFloat32 `json:"plan_billed_amount,omitempty"`
	// Units included in plan
	PlanBilledUnits NullableFloat32 `json:"plan_billed_units,omitempty"`
	// Amount billed
	BurstBilledAmount NullableFloat32 `json:"burst_billed_amount,omitempty"`
	// Units billed
	BurstBilledUnits NullableFloat32 `json:"burst_billed_units,omitempty"`
	// Outstanding amount
	BurstOutstandingAmount NullableFloat32 `json:"burst_outstanding_amount,omitempty"`
	// Outstanding units
	BurstOutstandingUnits NullableFloat32 `json:"burst_outstanding_units,omitempty"`
	// Total cost in cents for current period
	TotalUsageAmount NullableFloat32 `json:"total_usage_amount,omitempty"`
	// Total used units for current period
	TotalUsedUnits NullableFloat32 `json:"total_used_units,omitempty"`
}

// NewMeteredSubscriptionUsage instantiates a new MeteredSubscriptionUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeteredSubscriptionUsage() *MeteredSubscriptionUsage {
	this := MeteredSubscriptionUsage{}
	return &this
}

// NewMeteredSubscriptionUsageWithDefaults instantiates a new MeteredSubscriptionUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeteredSubscriptionUsageWithDefaults() *MeteredSubscriptionUsage {
	this := MeteredSubscriptionUsage{}
	return &this
}

// GetBurstRate returns the BurstRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MeteredSubscriptionUsage) GetBurstRate() float32 {
	if o == nil || IsNil(o.BurstRate.Get()) {
		var ret float32
		return ret
	}
	return *o.BurstRate.Get()
}

// GetBurstRateOk returns a tuple with the BurstRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MeteredSubscriptionUsage) GetBurstRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BurstRate.Get(), o.BurstRate.IsSet()
}

// HasBurstRate returns a boolean if a field has been set.
func (o *MeteredSubscriptionUsage) HasBurstRate() bool {
	if o != nil && o.BurstRate.IsSet() {
		return true
	}

	return false
}

// SetBurstRate gets a reference to the given NullableFloat32 and assigns it to the BurstRate field.
func (o *MeteredSubscriptionUsage) SetBurstRate(v float32) {
	o.BurstRate.Set(&v)
}
// SetBurstRateNil sets the value for BurstRate to be an explicit nil
func (o *MeteredSubscriptionUsage) SetBurstRateNil() {
	o.BurstRate.Set(nil)
}

// UnsetBurstRate ensures that no value is present for BurstRate, not even an explicit nil
func (o *MeteredSubscriptionUsage) UnsetBurstRate() {
	o.BurstRate.Unset()
}

// GetAllocatedHours returns the AllocatedHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MeteredSubscriptionUsage) GetAllocatedHours() float32 {
	if o == nil || IsNil(o.AllocatedHours.Get()) {
		var ret float32
		return ret
	}
	return *o.AllocatedHours.Get()
}

// GetAllocatedHoursOk returns a tuple with the AllocatedHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MeteredSubscriptionUsage) GetAllocatedHoursOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllocatedHours.Get(), o.AllocatedHours.IsSet()
}

// HasAllocatedHours returns a boolean if a field has been set.
func (o *MeteredSubscriptionUsage) HasAllocatedHours() bool {
	if o != nil && o.AllocatedHours.IsSet() {
		return true
	}

	return false
}

// SetAllocatedHours gets a reference to the given NullableFloat32 and assigns it to the AllocatedHours field.
func (o *MeteredSubscriptionUsage) SetAllocatedHours(v float32) {
	o.AllocatedHours.Set(&v)
}
// SetAllocatedHoursNil sets the value for AllocatedHours to be an explicit nil
func (o *MeteredSubscriptionUsage) SetAllocatedHoursNil() {
	o.AllocatedHours.Set(nil)
}

// UnsetAllocatedHours ensures that no value is present for AllocatedHours, not even an explicit nil
func (o *MeteredSubscriptionUsage) UnsetAllocatedHours() {
	o.AllocatedHours.Unset()
}

// GetPlanBilledAmount returns the PlanBilledAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MeteredSubscriptionUsage) GetPlanBilledAmount() float32 {
	if o == nil || IsNil(o.PlanBilledAmount.Get()) {
		var ret float32
		return ret
	}
	return *o.PlanBilledAmount.Get()
}

// GetPlanBilledAmountOk returns a tuple with the PlanBilledAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MeteredSubscriptionUsage) GetPlanBilledAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlanBilledAmount.Get(), o.PlanBilledAmount.IsSet()
}

// HasPlanBilledAmount returns a boolean if a field has been set.
func (o *MeteredSubscriptionUsage) HasPlanBilledAmount() bool {
	if o != nil && o.PlanBilledAmount.IsSet() {
		return true
	}

	return false
}

// SetPlanBilledAmount gets a reference to the given NullableFloat32 and assigns it to the PlanBilledAmount field.
func (o *MeteredSubscriptionUsage) SetPlanBilledAmount(v float32) {
	o.PlanBilledAmount.Set(&v)
}
// SetPlanBilledAmountNil sets the value for PlanBilledAmount to be an explicit nil
func (o *MeteredSubscriptionUsage) SetPlanBilledAmountNil() {
	o.PlanBilledAmount.Set(nil)
}

// UnsetPlanBilledAmount ensures that no value is present for PlanBilledAmount, not even an explicit nil
func (o *MeteredSubscriptionUsage) UnsetPlanBilledAmount() {
	o.PlanBilledAmount.Unset()
}

// GetPlanBilledUnits returns the PlanBilledUnits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MeteredSubscriptionUsage) GetPlanBilledUnits() float32 {
	if o == nil || IsNil(o.PlanBilledUnits.Get()) {
		var ret float32
		return ret
	}
	return *o.PlanBilledUnits.Get()
}

// GetPlanBilledUnitsOk returns a tuple with the PlanBilledUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MeteredSubscriptionUsage) GetPlanBilledUnitsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlanBilledUnits.Get(), o.PlanBilledUnits.IsSet()
}

// HasPlanBilledUnits returns a boolean if a field has been set.
func (o *MeteredSubscriptionUsage) HasPlanBilledUnits() bool {
	if o != nil && o.PlanBilledUnits.IsSet() {
		return true
	}

	return false
}

// SetPlanBilledUnits gets a reference to the given NullableFloat32 and assigns it to the PlanBilledUnits field.
func (o *MeteredSubscriptionUsage) SetPlanBilledUnits(v float32) {
	o.PlanBilledUnits.Set(&v)
}
// SetPlanBilledUnitsNil sets the value for PlanBilledUnits to be an explicit nil
func (o *MeteredSubscriptionUsage) SetPlanBilledUnitsNil() {
	o.PlanBilledUnits.Set(nil)
}

// UnsetPlanBilledUnits ensures that no value is present for PlanBilledUnits, not even an explicit nil
func (o *MeteredSubscriptionUsage) UnsetPlanBilledUnits() {
	o.PlanBilledUnits.Unset()
}

// GetBurstBilledAmount returns the BurstBilledAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MeteredSubscriptionUsage) GetBurstBilledAmount() float32 {
	if o == nil || IsNil(o.BurstBilledAmount.Get()) {
		var ret float32
		return ret
	}
	return *o.BurstBilledAmount.Get()
}

// GetBurstBilledAmountOk returns a tuple with the BurstBilledAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MeteredSubscriptionUsage) GetBurstBilledAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BurstBilledAmount.Get(), o.BurstBilledAmount.IsSet()
}

// HasBurstBilledAmount returns a boolean if a field has been set.
func (o *MeteredSubscriptionUsage) HasBurstBilledAmount() bool {
	if o != nil && o.BurstBilledAmount.IsSet() {
		return true
	}

	return false
}

// SetBurstBilledAmount gets a reference to the given NullableFloat32 and assigns it to the BurstBilledAmount field.
func (o *MeteredSubscriptionUsage) SetBurstBilledAmount(v float32) {
	o.BurstBilledAmount.Set(&v)
}
// SetBurstBilledAmountNil sets the value for BurstBilledAmount to be an explicit nil
func (o *MeteredSubscriptionUsage) SetBurstBilledAmountNil() {
	o.BurstBilledAmount.Set(nil)
}

// UnsetBurstBilledAmount ensures that no value is present for BurstBilledAmount, not even an explicit nil
func (o *MeteredSubscriptionUsage) UnsetBurstBilledAmount() {
	o.BurstBilledAmount.Unset()
}

// GetBurstBilledUnits returns the BurstBilledUnits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MeteredSubscriptionUsage) GetBurstBilledUnits() float32 {
	if o == nil || IsNil(o.BurstBilledUnits.Get()) {
		var ret float32
		return ret
	}
	return *o.BurstBilledUnits.Get()
}

// GetBurstBilledUnitsOk returns a tuple with the BurstBilledUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MeteredSubscriptionUsage) GetBurstBilledUnitsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BurstBilledUnits.Get(), o.BurstBilledUnits.IsSet()
}

// HasBurstBilledUnits returns a boolean if a field has been set.
func (o *MeteredSubscriptionUsage) HasBurstBilledUnits() bool {
	if o != nil && o.BurstBilledUnits.IsSet() {
		return true
	}

	return false
}

// SetBurstBilledUnits gets a reference to the given NullableFloat32 and assigns it to the BurstBilledUnits field.
func (o *MeteredSubscriptionUsage) SetBurstBilledUnits(v float32) {
	o.BurstBilledUnits.Set(&v)
}
// SetBurstBilledUnitsNil sets the value for BurstBilledUnits to be an explicit nil
func (o *MeteredSubscriptionUsage) SetBurstBilledUnitsNil() {
	o.BurstBilledUnits.Set(nil)
}

// UnsetBurstBilledUnits ensures that no value is present for BurstBilledUnits, not even an explicit nil
func (o *MeteredSubscriptionUsage) UnsetBurstBilledUnits() {
	o.BurstBilledUnits.Unset()
}

// GetBurstOutstandingAmount returns the BurstOutstandingAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MeteredSubscriptionUsage) GetBurstOutstandingAmount() float32 {
	if o == nil || IsNil(o.BurstOutstandingAmount.Get()) {
		var ret float32
		return ret
	}
	return *o.BurstOutstandingAmount.Get()
}

// GetBurstOutstandingAmountOk returns a tuple with the BurstOutstandingAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MeteredSubscriptionUsage) GetBurstOutstandingAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BurstOutstandingAmount.Get(), o.BurstOutstandingAmount.IsSet()
}

// HasBurstOutstandingAmount returns a boolean if a field has been set.
func (o *MeteredSubscriptionUsage) HasBurstOutstandingAmount() bool {
	if o != nil && o.BurstOutstandingAmount.IsSet() {
		return true
	}

	return false
}

// SetBurstOutstandingAmount gets a reference to the given NullableFloat32 and assigns it to the BurstOutstandingAmount field.
func (o *MeteredSubscriptionUsage) SetBurstOutstandingAmount(v float32) {
	o.BurstOutstandingAmount.Set(&v)
}
// SetBurstOutstandingAmountNil sets the value for BurstOutstandingAmount to be an explicit nil
func (o *MeteredSubscriptionUsage) SetBurstOutstandingAmountNil() {
	o.BurstOutstandingAmount.Set(nil)
}

// UnsetBurstOutstandingAmount ensures that no value is present for BurstOutstandingAmount, not even an explicit nil
func (o *MeteredSubscriptionUsage) UnsetBurstOutstandingAmount() {
	o.BurstOutstandingAmount.Unset()
}

// GetBurstOutstandingUnits returns the BurstOutstandingUnits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MeteredSubscriptionUsage) GetBurstOutstandingUnits() float32 {
	if o == nil || IsNil(o.BurstOutstandingUnits.Get()) {
		var ret float32
		return ret
	}
	return *o.BurstOutstandingUnits.Get()
}

// GetBurstOutstandingUnitsOk returns a tuple with the BurstOutstandingUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MeteredSubscriptionUsage) GetBurstOutstandingUnitsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BurstOutstandingUnits.Get(), o.BurstOutstandingUnits.IsSet()
}

// HasBurstOutstandingUnits returns a boolean if a field has been set.
func (o *MeteredSubscriptionUsage) HasBurstOutstandingUnits() bool {
	if o != nil && o.BurstOutstandingUnits.IsSet() {
		return true
	}

	return false
}

// SetBurstOutstandingUnits gets a reference to the given NullableFloat32 and assigns it to the BurstOutstandingUnits field.
func (o *MeteredSubscriptionUsage) SetBurstOutstandingUnits(v float32) {
	o.BurstOutstandingUnits.Set(&v)
}
// SetBurstOutstandingUnitsNil sets the value for BurstOutstandingUnits to be an explicit nil
func (o *MeteredSubscriptionUsage) SetBurstOutstandingUnitsNil() {
	o.BurstOutstandingUnits.Set(nil)
}

// UnsetBurstOutstandingUnits ensures that no value is present for BurstOutstandingUnits, not even an explicit nil
func (o *MeteredSubscriptionUsage) UnsetBurstOutstandingUnits() {
	o.BurstOutstandingUnits.Unset()
}

// GetTotalUsageAmount returns the TotalUsageAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MeteredSubscriptionUsage) GetTotalUsageAmount() float32 {
	if o == nil || IsNil(o.TotalUsageAmount.Get()) {
		var ret float32
		return ret
	}
	return *o.TotalUsageAmount.Get()
}

// GetTotalUsageAmountOk returns a tuple with the TotalUsageAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MeteredSubscriptionUsage) GetTotalUsageAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalUsageAmount.Get(), o.TotalUsageAmount.IsSet()
}

// HasTotalUsageAmount returns a boolean if a field has been set.
func (o *MeteredSubscriptionUsage) HasTotalUsageAmount() bool {
	if o != nil && o.TotalUsageAmount.IsSet() {
		return true
	}

	return false
}

// SetTotalUsageAmount gets a reference to the given NullableFloat32 and assigns it to the TotalUsageAmount field.
func (o *MeteredSubscriptionUsage) SetTotalUsageAmount(v float32) {
	o.TotalUsageAmount.Set(&v)
}
// SetTotalUsageAmountNil sets the value for TotalUsageAmount to be an explicit nil
func (o *MeteredSubscriptionUsage) SetTotalUsageAmountNil() {
	o.TotalUsageAmount.Set(nil)
}

// UnsetTotalUsageAmount ensures that no value is present for TotalUsageAmount, not even an explicit nil
func (o *MeteredSubscriptionUsage) UnsetTotalUsageAmount() {
	o.TotalUsageAmount.Unset()
}

// GetTotalUsedUnits returns the TotalUsedUnits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MeteredSubscriptionUsage) GetTotalUsedUnits() float32 {
	if o == nil || IsNil(o.TotalUsedUnits.Get()) {
		var ret float32
		return ret
	}
	return *o.TotalUsedUnits.Get()
}

// GetTotalUsedUnitsOk returns a tuple with the TotalUsedUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MeteredSubscriptionUsage) GetTotalUsedUnitsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalUsedUnits.Get(), o.TotalUsedUnits.IsSet()
}

// HasTotalUsedUnits returns a boolean if a field has been set.
func (o *MeteredSubscriptionUsage) HasTotalUsedUnits() bool {
	if o != nil && o.TotalUsedUnits.IsSet() {
		return true
	}

	return false
}

// SetTotalUsedUnits gets a reference to the given NullableFloat32 and assigns it to the TotalUsedUnits field.
func (o *MeteredSubscriptionUsage) SetTotalUsedUnits(v float32) {
	o.TotalUsedUnits.Set(&v)
}
// SetTotalUsedUnitsNil sets the value for TotalUsedUnits to be an explicit nil
func (o *MeteredSubscriptionUsage) SetTotalUsedUnitsNil() {
	o.TotalUsedUnits.Set(nil)
}

// UnsetTotalUsedUnits ensures that no value is present for TotalUsedUnits, not even an explicit nil
func (o *MeteredSubscriptionUsage) UnsetTotalUsedUnits() {
	o.TotalUsedUnits.Unset()
}

func (o MeteredSubscriptionUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeteredSubscriptionUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BurstRate.IsSet() {
		toSerialize["burst_rate"] = o.BurstRate.Get()
	}
	if o.AllocatedHours.IsSet() {
		toSerialize["allocated_hours"] = o.AllocatedHours.Get()
	}
	if o.PlanBilledAmount.IsSet() {
		toSerialize["plan_billed_amount"] = o.PlanBilledAmount.Get()
	}
	if o.PlanBilledUnits.IsSet() {
		toSerialize["plan_billed_units"] = o.PlanBilledUnits.Get()
	}
	if o.BurstBilledAmount.IsSet() {
		toSerialize["burst_billed_amount"] = o.BurstBilledAmount.Get()
	}
	if o.BurstBilledUnits.IsSet() {
		toSerialize["burst_billed_units"] = o.BurstBilledUnits.Get()
	}
	if o.BurstOutstandingAmount.IsSet() {
		toSerialize["burst_outstanding_amount"] = o.BurstOutstandingAmount.Get()
	}
	if o.BurstOutstandingUnits.IsSet() {
		toSerialize["burst_outstanding_units"] = o.BurstOutstandingUnits.Get()
	}
	if o.TotalUsageAmount.IsSet() {
		toSerialize["total_usage_amount"] = o.TotalUsageAmount.Get()
	}
	if o.TotalUsedUnits.IsSet() {
		toSerialize["total_used_units"] = o.TotalUsedUnits.Get()
	}
	return toSerialize, nil
}

type NullableMeteredSubscriptionUsage struct {
	value *MeteredSubscriptionUsage
	isSet bool
}

func (v NullableMeteredSubscriptionUsage) Get() *MeteredSubscriptionUsage {
	return v.value
}

func (v *NullableMeteredSubscriptionUsage) Set(val *MeteredSubscriptionUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableMeteredSubscriptionUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableMeteredSubscriptionUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeteredSubscriptionUsage(val *MeteredSubscriptionUsage) *NullableMeteredSubscriptionUsage {
	return &NullableMeteredSubscriptionUsage{value: val, isSet: true}
}

func (v NullableMeteredSubscriptionUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeteredSubscriptionUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Corellium API

REST API to manage your virtual devices.

API version: 6.6.0-24071
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"encoding/json"
)

// checks if the SslsplitFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SslsplitFilter{}

// SslsplitFilter 
type SslsplitFilter struct {
	// 
	TruncatePcap NullableBool `json:"truncatePcap,omitempty"`
}

// NewSslsplitFilter instantiates a new SslsplitFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSslsplitFilter() *SslsplitFilter {
	this := SslsplitFilter{}
	return &this
}

// NewSslsplitFilterWithDefaults instantiates a new SslsplitFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSslsplitFilterWithDefaults() *SslsplitFilter {
	this := SslsplitFilter{}
	return &this
}

// GetTruncatePcap returns the TruncatePcap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SslsplitFilter) GetTruncatePcap() bool {
	if o == nil || IsNil(o.TruncatePcap.Get()) {
		var ret bool
		return ret
	}
	return *o.TruncatePcap.Get()
}

// GetTruncatePcapOk returns a tuple with the TruncatePcap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SslsplitFilter) GetTruncatePcapOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TruncatePcap.Get(), o.TruncatePcap.IsSet()
}

// HasTruncatePcap returns a boolean if a field has been set.
func (o *SslsplitFilter) HasTruncatePcap() bool {
	if o != nil && o.TruncatePcap.IsSet() {
		return true
	}

	return false
}

// SetTruncatePcap gets a reference to the given NullableBool and assigns it to the TruncatePcap field.
func (o *SslsplitFilter) SetTruncatePcap(v bool) {
	o.TruncatePcap.Set(&v)
}
// SetTruncatePcapNil sets the value for TruncatePcap to be an explicit nil
func (o *SslsplitFilter) SetTruncatePcapNil() {
	o.TruncatePcap.Set(nil)
}

// UnsetTruncatePcap ensures that no value is present for TruncatePcap, not even an explicit nil
func (o *SslsplitFilter) UnsetTruncatePcap() {
	o.TruncatePcap.Unset()
}

func (o SslsplitFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SslsplitFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.TruncatePcap.IsSet() {
		toSerialize["truncatePcap"] = o.TruncatePcap.Get()
	}
	return toSerialize, nil
}

type NullableSslsplitFilter struct {
	value *SslsplitFilter
	isSet bool
}

func (v NullableSslsplitFilter) Get() *SslsplitFilter {
	return v.value
}

func (v *NullableSslsplitFilter) Set(val *SslsplitFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableSslsplitFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableSslsplitFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSslsplitFilter(val *SslsplitFilter) *NullableSslsplitFilter {
	return &NullableSslsplitFilter{value: val, isSet: true}
}

func (v NullableSslsplitFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSslsplitFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



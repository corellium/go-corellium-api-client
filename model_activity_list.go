/*
Corellium API

REST API to manage your virtual devices.

API version: 7.3.0-27831
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"encoding/json"
)

// checks if the ActivityList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityList{}

// ActivityList 
type ActivityList struct {
	// List of activities
	Data []Activity `json:"data,omitempty"`
	Pagination *Pagination `json:"pagination,omitempty"`
}

// NewActivityList instantiates a new ActivityList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityList() *ActivityList {
	this := ActivityList{}
	return &this
}

// NewActivityListWithDefaults instantiates a new ActivityList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityListWithDefaults() *ActivityList {
	this := ActivityList{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityList) GetData() []Activity {
	if o == nil {
		var ret []Activity
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityList) GetDataOk() ([]Activity, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ActivityList) HasData() bool {
	if o != nil && IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []Activity and assigns it to the Data field.
func (o *ActivityList) SetData(v []Activity) {
	o.Data = v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *ActivityList) GetPagination() Pagination {
	if o == nil || IsNil(o.Pagination) {
		var ret Pagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityList) GetPaginationOk() (*Pagination, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *ActivityList) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given Pagination and assigns it to the Pagination field.
func (o *ActivityList) SetPagination(v Pagination) {
	o.Pagination = &v
}

func (o ActivityList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	return toSerialize, nil
}

type NullableActivityList struct {
	value *ActivityList
	isSet bool
}

func (v NullableActivityList) Get() *ActivityList {
	return v.value
}

func (v *NullableActivityList) Set(val *ActivityList) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityList) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityList(val *ActivityList) *NullableActivityList {
	return &NullableActivityList{value: val, isSet: true}
}

func (v NullableActivityList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



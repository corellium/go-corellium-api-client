/*
Corellium API

REST API to manage your virtual devices.

API version: 7.0.0-25053
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"encoding/json"
)

// checks if the ActivityList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityList{}

// ActivityList 
type ActivityList struct {
	// List of activity entries
	Items []ActivityEntry `json:"items,omitempty"`
	// Total number of entries
	Total NullableFloat32 `json:"total,omitempty"`
}

// NewActivityList instantiates a new ActivityList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityList() *ActivityList {
	this := ActivityList{}
	return &this
}

// NewActivityListWithDefaults instantiates a new ActivityList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityListWithDefaults() *ActivityList {
	this := ActivityList{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityList) GetItems() []ActivityEntry {
	if o == nil {
		var ret []ActivityEntry
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityList) GetItemsOk() ([]ActivityEntry, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ActivityList) HasItems() bool {
	if o != nil && IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []ActivityEntry and assigns it to the Items field.
func (o *ActivityList) SetItems(v []ActivityEntry) {
	o.Items = v
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityList) GetTotal() float32 {
	if o == nil || IsNil(o.Total.Get()) {
		var ret float32
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityList) GetTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *ActivityList) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableFloat32 and assigns it to the Total field.
func (o *ActivityList) SetTotal(v float32) {
	o.Total.Set(&v)
}
// SetTotalNil sets the value for Total to be an explicit nil
func (o *ActivityList) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *ActivityList) UnsetTotal() {
	o.Total.Unset()
}

func (o ActivityList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	return toSerialize, nil
}

type NullableActivityList struct {
	value *ActivityList
	isSet bool
}

func (v NullableActivityList) Get() *ActivityList {
	return v.value
}

func (v *NullableActivityList) Set(val *ActivityList) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityList) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityList(val *ActivityList) *NullableActivityList {
	return &NullableActivityList{value: val, isSet: true}
}

func (v NullableActivityList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Corellium API

REST API to manage your virtual devices.

API version: 5.5.0-18750
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"encoding/json"
)

// checks if the TextInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TextInput{}

// TextInput 
type TextInput struct {
	// text to type
	Text NullableString `json:"text,omitempty"`
}

// NewTextInput instantiates a new TextInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextInput() *TextInput {
	this := TextInput{}
	return &this
}

// NewTextInputWithDefaults instantiates a new TextInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextInputWithDefaults() *TextInput {
	this := TextInput{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TextInput) GetText() string {
	if o == nil || IsNil(o.Text.Get()) {
		var ret string
		return ret
	}
	return *o.Text.Get()
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TextInput) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Text.Get(), o.Text.IsSet()
}

// HasText returns a boolean if a field has been set.
func (o *TextInput) HasText() bool {
	if o != nil && o.Text.IsSet() {
		return true
	}

	return false
}

// SetText gets a reference to the given NullableString and assigns it to the Text field.
func (o *TextInput) SetText(v string) {
	o.Text.Set(&v)
}
// SetTextNil sets the value for Text to be an explicit nil
func (o *TextInput) SetTextNil() {
	o.Text.Set(nil)
}

// UnsetText ensures that no value is present for Text, not even an explicit nil
func (o *TextInput) UnsetText() {
	o.Text.Unset()
}

func (o TextInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TextInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Text.IsSet() {
		toSerialize["text"] = o.Text.Get()
	}
	return toSerialize, nil
}

type NullableTextInput struct {
	value *TextInput
	isSet bool
}

func (v NullableTextInput) Get() *TextInput {
	return v.value
}

func (v *NullableTextInput) Set(val *TextInput) {
	v.value = val
	v.isSet = true
}

func (v NullableTextInput) IsSet() bool {
	return v.isSet
}

func (v *NullableTextInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextInput(val *TextInput) *NullableTextInput {
	return &NullableTextInput{value: val, isSet: true}
}

func (v NullableTextInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Corellium API

REST API to manage your virtual devices.

API version: 6.6.0-24071
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"encoding/json"
)

// checks if the Snapshot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Snapshot{}

// Snapshot 
type Snapshot struct {
	// Snapshot ID
	Id string `json:"id"`
	// Snapshot name
	Name string `json:"name"`
	// Instance that this snapshot is of
	Instance string `json:"instance"`
	Status SnapshotStatus `json:"status"`
	// UNIX Date that the snapshot was created
	Date float32 `json:"date"`
	// 
	Fresh bool `json:"fresh"`
	// Live snapshot (included state and memory)
	Live bool `json:"live"`
	// 
	Local bool `json:"local"`
	// The device model
	Model NullableString `json:"model,omitempty"`
	Sharing *SnapshotSharing `json:"sharing,omitempty"`
}

// NewSnapshot instantiates a new Snapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshot(id string, name string, instance string, status SnapshotStatus, date float32, fresh bool, live bool, local bool) *Snapshot {
	this := Snapshot{}
	this.Id = id
	this.Name = name
	this.Instance = instance
	this.Status = status
	this.Date = date
	this.Fresh = fresh
	this.Live = live
	this.Local = local
	return &this
}

// NewSnapshotWithDefaults instantiates a new Snapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotWithDefaults() *Snapshot {
	this := Snapshot{}
	return &this
}

// GetId returns the Id field value
func (o *Snapshot) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Snapshot) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Snapshot) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Snapshot) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Snapshot) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Snapshot) SetName(v string) {
	o.Name = v
}

// GetInstance returns the Instance field value
func (o *Snapshot) GetInstance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value
// and a boolean to check if the value has been set.
func (o *Snapshot) GetInstanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Instance, true
}

// SetInstance sets field value
func (o *Snapshot) SetInstance(v string) {
	o.Instance = v
}

// GetStatus returns the Status field value
func (o *Snapshot) GetStatus() SnapshotStatus {
	if o == nil {
		var ret SnapshotStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Snapshot) GetStatusOk() (*SnapshotStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Snapshot) SetStatus(v SnapshotStatus) {
	o.Status = v
}

// GetDate returns the Date field value
func (o *Snapshot) GetDate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *Snapshot) GetDateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *Snapshot) SetDate(v float32) {
	o.Date = v
}

// GetFresh returns the Fresh field value
func (o *Snapshot) GetFresh() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Fresh
}

// GetFreshOk returns a tuple with the Fresh field value
// and a boolean to check if the value has been set.
func (o *Snapshot) GetFreshOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fresh, true
}

// SetFresh sets field value
func (o *Snapshot) SetFresh(v bool) {
	o.Fresh = v
}

// GetLive returns the Live field value
func (o *Snapshot) GetLive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Live
}

// GetLiveOk returns a tuple with the Live field value
// and a boolean to check if the value has been set.
func (o *Snapshot) GetLiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Live, true
}

// SetLive sets field value
func (o *Snapshot) SetLive(v bool) {
	o.Live = v
}

// GetLocal returns the Local field value
func (o *Snapshot) GetLocal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Local
}

// GetLocalOk returns a tuple with the Local field value
// and a boolean to check if the value has been set.
func (o *Snapshot) GetLocalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Local, true
}

// SetLocal sets field value
func (o *Snapshot) SetLocal(v bool) {
	o.Local = v
}

// GetModel returns the Model field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Snapshot) GetModel() string {
	if o == nil || IsNil(o.Model.Get()) {
		var ret string
		return ret
	}
	return *o.Model.Get()
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Snapshot) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Model.Get(), o.Model.IsSet()
}

// HasModel returns a boolean if a field has been set.
func (o *Snapshot) HasModel() bool {
	if o != nil && o.Model.IsSet() {
		return true
	}

	return false
}

// SetModel gets a reference to the given NullableString and assigns it to the Model field.
func (o *Snapshot) SetModel(v string) {
	o.Model.Set(&v)
}
// SetModelNil sets the value for Model to be an explicit nil
func (o *Snapshot) SetModelNil() {
	o.Model.Set(nil)
}

// UnsetModel ensures that no value is present for Model, not even an explicit nil
func (o *Snapshot) UnsetModel() {
	o.Model.Unset()
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *Snapshot) GetSharing() SnapshotSharing {
	if o == nil || IsNil(o.Sharing) {
		var ret SnapshotSharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snapshot) GetSharingOk() (*SnapshotSharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *Snapshot) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given SnapshotSharing and assigns it to the Sharing field.
func (o *Snapshot) SetSharing(v SnapshotSharing) {
	o.Sharing = &v
}

func (o Snapshot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Snapshot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["instance"] = o.Instance
	toSerialize["status"] = o.Status
	toSerialize["date"] = o.Date
	toSerialize["fresh"] = o.Fresh
	toSerialize["live"] = o.Live
	toSerialize["local"] = o.Local
	if o.Model.IsSet() {
		toSerialize["model"] = o.Model.Get()
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	return toSerialize, nil
}

type NullableSnapshot struct {
	value *Snapshot
	isSet bool
}

func (v NullableSnapshot) Get() *Snapshot {
	return v.value
}

func (v *NullableSnapshot) Set(val *Snapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshot(val *Snapshot) *NullableSnapshot {
	return &NullableSnapshot{value: val, isSet: true}
}

func (v NullableSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



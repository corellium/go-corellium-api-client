/*
Corellium API

REST API to manage your virtual devices.

API version: 7.3.0-27831
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"encoding/json"
)

// checks if the TouchInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TouchInput{}

// TouchInput 
type TouchInput struct {
	// Finger Positions
	Position map[string]interface{} `json:"position"`
	// Buttons to be held when this position is reached. Either a Button enum object or an ASCII character. No change if not defined.
	Buttons []TouchInputButtonsInner `json:"buttons,omitempty"`
	// true if you want to use normalized x,y coordinates from 0-10000 (eg 5000,5000 is always center of screen)
	Normalized NullableBool `json:"normalized,omitempty"`
	// Duration to wait before this input is executed.  Instant if not defined.
	Wait NullableFloat32 `json:"wait,omitempty"`
}

// NewTouchInput instantiates a new TouchInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTouchInput(position map[string]interface{}) *TouchInput {
	this := TouchInput{}
	this.Position = position
	return &this
}

// NewTouchInputWithDefaults instantiates a new TouchInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTouchInputWithDefaults() *TouchInput {
	this := TouchInput{}
	return &this
}

// GetPosition returns the Position field value
func (o *TouchInput) GetPosition() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *TouchInput) GetPositionOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Position, true
}

// SetPosition sets field value
func (o *TouchInput) SetPosition(v map[string]interface{}) {
	o.Position = v
}

// GetButtons returns the Buttons field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TouchInput) GetButtons() []TouchInputButtonsInner {
	if o == nil {
		var ret []TouchInputButtonsInner
		return ret
	}
	return o.Buttons
}

// GetButtonsOk returns a tuple with the Buttons field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TouchInput) GetButtonsOk() ([]TouchInputButtonsInner, bool) {
	if o == nil || IsNil(o.Buttons) {
		return nil, false
	}
	return o.Buttons, true
}

// HasButtons returns a boolean if a field has been set.
func (o *TouchInput) HasButtons() bool {
	if o != nil && IsNil(o.Buttons) {
		return true
	}

	return false
}

// SetButtons gets a reference to the given []TouchInputButtonsInner and assigns it to the Buttons field.
func (o *TouchInput) SetButtons(v []TouchInputButtonsInner) {
	o.Buttons = v
}

// GetNormalized returns the Normalized field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TouchInput) GetNormalized() bool {
	if o == nil || IsNil(o.Normalized.Get()) {
		var ret bool
		return ret
	}
	return *o.Normalized.Get()
}

// GetNormalizedOk returns a tuple with the Normalized field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TouchInput) GetNormalizedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Normalized.Get(), o.Normalized.IsSet()
}

// HasNormalized returns a boolean if a field has been set.
func (o *TouchInput) HasNormalized() bool {
	if o != nil && o.Normalized.IsSet() {
		return true
	}

	return false
}

// SetNormalized gets a reference to the given NullableBool and assigns it to the Normalized field.
func (o *TouchInput) SetNormalized(v bool) {
	o.Normalized.Set(&v)
}
// SetNormalizedNil sets the value for Normalized to be an explicit nil
func (o *TouchInput) SetNormalizedNil() {
	o.Normalized.Set(nil)
}

// UnsetNormalized ensures that no value is present for Normalized, not even an explicit nil
func (o *TouchInput) UnsetNormalized() {
	o.Normalized.Unset()
}

// GetWait returns the Wait field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TouchInput) GetWait() float32 {
	if o == nil || IsNil(o.Wait.Get()) {
		var ret float32
		return ret
	}
	return *o.Wait.Get()
}

// GetWaitOk returns a tuple with the Wait field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TouchInput) GetWaitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Wait.Get(), o.Wait.IsSet()
}

// HasWait returns a boolean if a field has been set.
func (o *TouchInput) HasWait() bool {
	if o != nil && o.Wait.IsSet() {
		return true
	}

	return false
}

// SetWait gets a reference to the given NullableFloat32 and assigns it to the Wait field.
func (o *TouchInput) SetWait(v float32) {
	o.Wait.Set(&v)
}
// SetWaitNil sets the value for Wait to be an explicit nil
func (o *TouchInput) SetWaitNil() {
	o.Wait.Set(nil)
}

// UnsetWait ensures that no value is present for Wait, not even an explicit nil
func (o *TouchInput) UnsetWait() {
	o.Wait.Unset()
}

func (o TouchInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TouchInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["position"] = o.Position
	if o.Buttons != nil {
		toSerialize["buttons"] = o.Buttons
	}
	if o.Normalized.IsSet() {
		toSerialize["normalized"] = o.Normalized.Get()
	}
	if o.Wait.IsSet() {
		toSerialize["wait"] = o.Wait.Get()
	}
	return toSerialize, nil
}

type NullableTouchInput struct {
	value *TouchInput
	isSet bool
}

func (v NullableTouchInput) Get() *TouchInput {
	return v.value
}

func (v *NullableTouchInput) Set(val *TouchInput) {
	v.value = val
	v.isSet = true
}

func (v NullableTouchInput) IsSet() bool {
	return v.isSet
}

func (v *NullableTouchInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTouchInput(val *TouchInput) *NullableTouchInput {
	return &NullableTouchInput{value: val, isSet: true}
}

func (v NullableTouchInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTouchInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



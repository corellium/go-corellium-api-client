/*
Corellium API

REST API to manage your virtual devices.

API version: 7.1.0-26108
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// NetConnectApiService NetConnectApi service
type NetConnectApiService service

type NetConnectApiV1CreateNetworkConnectionRequest struct {
	ctx context.Context
	ApiService *NetConnectApiService
	createNetworkConnectionOptions *CreateNetworkConnectionOptions
}

// Network Connection Options
func (r NetConnectApiV1CreateNetworkConnectionRequest) CreateNetworkConnectionOptions(createNetworkConnectionOptions CreateNetworkConnectionOptions) NetConnectApiV1CreateNetworkConnectionRequest {
	r.createNetworkConnectionOptions = &createNetworkConnectionOptions
	return r
}

func (r NetConnectApiV1CreateNetworkConnectionRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1CreateNetworkConnectionExecute(r)
}

/*
V1CreateNetworkConnection Create a new Network Connection

You must have the domain administrator role to create a network connection.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return NetConnectApiV1CreateNetworkConnectionRequest
*/
func (a *NetConnectApiService) V1CreateNetworkConnection(ctx context.Context) NetConnectApiV1CreateNetworkConnectionRequest {
	return NetConnectApiV1CreateNetworkConnectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *NetConnectApiService) V1CreateNetworkConnectionExecute(r NetConnectApiV1CreateNetworkConnectionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetConnectApiService.V1CreateNetworkConnection")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/network/connections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createNetworkConnectionOptions == nil {
		return nil, reportError("createNetworkConnectionOptions is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createNetworkConnectionOptions
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type NetConnectApiV1DeleteNetworkConnectionRequest struct {
	ctx context.Context
	ApiService *NetConnectApiService
	id string
}

func (r NetConnectApiV1DeleteNetworkConnectionRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1DeleteNetworkConnectionExecute(r)
}

/*
V1DeleteNetworkConnection Delete an existing Network Connection

You must have the domain administrator role to delete a network connection.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Network Connection Identifier - uuid
 @return NetConnectApiV1DeleteNetworkConnectionRequest
*/
func (a *NetConnectApiService) V1DeleteNetworkConnection(ctx context.Context, id string) NetConnectApiV1DeleteNetworkConnectionRequest {
	return NetConnectApiV1DeleteNetworkConnectionRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *NetConnectApiService) V1DeleteNetworkConnectionExecute(r NetConnectApiV1DeleteNetworkConnectionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetConnectApiService.V1DeleteNetworkConnection")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/network/connections/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type NetConnectApiV1ListNetworkConnectionsRequest struct {
	ctx context.Context
	ApiService *NetConnectApiService
}

func (r NetConnectApiV1ListNetworkConnectionsRequest) Execute() (*NetworkConnectionOffsetPaginationResult, *http.Response, error) {
	return r.ApiService.V1ListNetworkConnectionsExecute(r)
}

/*
V1ListNetworkConnections List available network connections

You must have the domain administrator or project administrator role to list network connections.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return NetConnectApiV1ListNetworkConnectionsRequest
*/
func (a *NetConnectApiService) V1ListNetworkConnections(ctx context.Context) NetConnectApiV1ListNetworkConnectionsRequest {
	return NetConnectApiV1ListNetworkConnectionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NetworkConnectionOffsetPaginationResult
func (a *NetConnectApiService) V1ListNetworkConnectionsExecute(r NetConnectApiV1ListNetworkConnectionsRequest) (*NetworkConnectionOffsetPaginationResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkConnectionOffsetPaginationResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetConnectApiService.V1ListNetworkConnections")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/network/connections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type NetConnectApiV1ListNetworkProvidersRequest struct {
	ctx context.Context
	ApiService *NetConnectApiService
}

func (r NetConnectApiV1ListNetworkProvidersRequest) Execute() (*NetworkConnectionProviderOffsetPaginationResult, *http.Response, error) {
	return r.ApiService.V1ListNetworkProvidersExecute(r)
}

/*
V1ListNetworkProviders List available network providers

Provides a list of registered network providers to be used when [creating network connections](#post-/v1/network/connections). You
must have the domain administrator role to list network providers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return NetConnectApiV1ListNetworkProvidersRequest
*/
func (a *NetConnectApiService) V1ListNetworkProviders(ctx context.Context) NetConnectApiV1ListNetworkProvidersRequest {
	return NetConnectApiV1ListNetworkProvidersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NetworkConnectionProviderOffsetPaginationResult
func (a *NetConnectApiService) V1ListNetworkProvidersExecute(r NetConnectApiV1ListNetworkProvidersRequest) (*NetworkConnectionProviderOffsetPaginationResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkConnectionProviderOffsetPaginationResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetConnectApiService.V1ListNetworkProviders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/network/providers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type NetConnectApiV1PartialUpdateNetworkConnectionRequest struct {
	ctx context.Context
	ApiService *NetConnectApiService
	id string
	updateNetworkConnectionOptions *UpdateNetworkConnectionOptions
}

// Network Connection Options
func (r NetConnectApiV1PartialUpdateNetworkConnectionRequest) UpdateNetworkConnectionOptions(updateNetworkConnectionOptions UpdateNetworkConnectionOptions) NetConnectApiV1PartialUpdateNetworkConnectionRequest {
	r.updateNetworkConnectionOptions = &updateNetworkConnectionOptions
	return r
}

func (r NetConnectApiV1PartialUpdateNetworkConnectionRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1PartialUpdateNetworkConnectionExecute(r)
}

/*
V1PartialUpdateNetworkConnection Update Network Connection (partial)

Only updates the specified attributes. You must have the domain administrator role to update a network connection.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Network Connection Identifier - uuid
 @return NetConnectApiV1PartialUpdateNetworkConnectionRequest
*/
func (a *NetConnectApiService) V1PartialUpdateNetworkConnection(ctx context.Context, id string) NetConnectApiV1PartialUpdateNetworkConnectionRequest {
	return NetConnectApiV1PartialUpdateNetworkConnectionRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *NetConnectApiService) V1PartialUpdateNetworkConnectionExecute(r NetConnectApiV1PartialUpdateNetworkConnectionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetConnectApiService.V1PartialUpdateNetworkConnection")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/network/connections/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateNetworkConnectionOptions == nil {
		return nil, reportError("updateNetworkConnectionOptions is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateNetworkConnectionOptions
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type NetConnectApiV1UpdateNetworkConnectionRequest struct {
	ctx context.Context
	ApiService *NetConnectApiService
	id string
	updateNetworkConnectionOptions *UpdateNetworkConnectionOptions
}

// Network Connection Options
func (r NetConnectApiV1UpdateNetworkConnectionRequest) UpdateNetworkConnectionOptions(updateNetworkConnectionOptions UpdateNetworkConnectionOptions) NetConnectApiV1UpdateNetworkConnectionRequest {
	r.updateNetworkConnectionOptions = &updateNetworkConnectionOptions
	return r
}

func (r NetConnectApiV1UpdateNetworkConnectionRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1UpdateNetworkConnectionExecute(r)
}

/*
V1UpdateNetworkConnection Update Network Connection

You must have the domain administrator role to update a network connection.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Network Connection Identifier - uuid
 @return NetConnectApiV1UpdateNetworkConnectionRequest
*/
func (a *NetConnectApiService) V1UpdateNetworkConnection(ctx context.Context, id string) NetConnectApiV1UpdateNetworkConnectionRequest {
	return NetConnectApiV1UpdateNetworkConnectionRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *NetConnectApiService) V1UpdateNetworkConnectionExecute(r NetConnectApiV1UpdateNetworkConnectionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetConnectApiService.V1UpdateNetworkConnection")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/network/connections/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateNetworkConnectionOptions == nil {
		return nil, reportError("updateNetworkConnectionOptions is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateNetworkConnectionOptions
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
Corellium API

REST API to manage your virtual devices.

API version: 5.5.0-18750
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"encoding/json"
)

// checks if the GpiosState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GpiosState{}

// GpiosState Current state of GPIOs
type GpiosState struct {
	Led *GpioStateDefinition `json:"led,omitempty"`
	Button *GpioStateDefinition `json:"button,omitempty"`
	Switch *GpioStateDefinition `json:"switch,omitempty"`
}

// NewGpiosState instantiates a new GpiosState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGpiosState() *GpiosState {
	this := GpiosState{}
	return &this
}

// NewGpiosStateWithDefaults instantiates a new GpiosState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGpiosStateWithDefaults() *GpiosState {
	this := GpiosState{}
	return &this
}

// GetLed returns the Led field value if set, zero value otherwise.
func (o *GpiosState) GetLed() GpioStateDefinition {
	if o == nil || IsNil(o.Led) {
		var ret GpioStateDefinition
		return ret
	}
	return *o.Led
}

// GetLedOk returns a tuple with the Led field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GpiosState) GetLedOk() (*GpioStateDefinition, bool) {
	if o == nil || IsNil(o.Led) {
		return nil, false
	}
	return o.Led, true
}

// HasLed returns a boolean if a field has been set.
func (o *GpiosState) HasLed() bool {
	if o != nil && !IsNil(o.Led) {
		return true
	}

	return false
}

// SetLed gets a reference to the given GpioStateDefinition and assigns it to the Led field.
func (o *GpiosState) SetLed(v GpioStateDefinition) {
	o.Led = &v
}

// GetButton returns the Button field value if set, zero value otherwise.
func (o *GpiosState) GetButton() GpioStateDefinition {
	if o == nil || IsNil(o.Button) {
		var ret GpioStateDefinition
		return ret
	}
	return *o.Button
}

// GetButtonOk returns a tuple with the Button field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GpiosState) GetButtonOk() (*GpioStateDefinition, bool) {
	if o == nil || IsNil(o.Button) {
		return nil, false
	}
	return o.Button, true
}

// HasButton returns a boolean if a field has been set.
func (o *GpiosState) HasButton() bool {
	if o != nil && !IsNil(o.Button) {
		return true
	}

	return false
}

// SetButton gets a reference to the given GpioStateDefinition and assigns it to the Button field.
func (o *GpiosState) SetButton(v GpioStateDefinition) {
	o.Button = &v
}

// GetSwitch returns the Switch field value if set, zero value otherwise.
func (o *GpiosState) GetSwitch() GpioStateDefinition {
	if o == nil || IsNil(o.Switch) {
		var ret GpioStateDefinition
		return ret
	}
	return *o.Switch
}

// GetSwitchOk returns a tuple with the Switch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GpiosState) GetSwitchOk() (*GpioStateDefinition, bool) {
	if o == nil || IsNil(o.Switch) {
		return nil, false
	}
	return o.Switch, true
}

// HasSwitch returns a boolean if a field has been set.
func (o *GpiosState) HasSwitch() bool {
	if o != nil && !IsNil(o.Switch) {
		return true
	}

	return false
}

// SetSwitch gets a reference to the given GpioStateDefinition and assigns it to the Switch field.
func (o *GpiosState) SetSwitch(v GpioStateDefinition) {
	o.Switch = &v
}

func (o GpiosState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GpiosState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Led) {
		toSerialize["led"] = o.Led
	}
	if !IsNil(o.Button) {
		toSerialize["button"] = o.Button
	}
	if !IsNil(o.Switch) {
		toSerialize["switch"] = o.Switch
	}
	return toSerialize, nil
}

type NullableGpiosState struct {
	value *GpiosState
	isSet bool
}

func (v NullableGpiosState) Get() *GpiosState {
	return v.value
}

func (v *NullableGpiosState) Set(val *GpiosState) {
	v.value = val
	v.isSet = true
}

func (v NullableGpiosState) IsSet() bool {
	return v.isSet
}

func (v *NullableGpiosState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGpiosState(val *GpiosState) *NullableGpiosState {
	return &NullableGpiosState{value: val, isSet: true}
}

func (v NullableGpiosState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGpiosState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



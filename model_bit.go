/*
Corellium API

REST API to manage your virtual devices.

API version: 5.5.0-18750
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"encoding/json"
	"fmt"
)

// Bit Bit value
type Bit float32

// List of Bit
const (
	_0 Bit = 0
	_1 Bit = 1
)

// All allowed values of Bit enum
var AllowedBitEnumValues = []Bit{
	0,
	1,
}

func (v *Bit) UnmarshalJSON(src []byte) error {
	var value float32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Bit(value)
	for _, existing := range AllowedBitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Bit", value)
}

// NewBitFromValue returns a pointer to a valid Bit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBitFromValue(v float32) (*Bit, error) {
	ev := Bit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Bit: valid values are %v", v, AllowedBitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Bit) IsValid() bool {
	for _, existing := range AllowedBitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Bit value
func (v Bit) Ptr() *Bit {
	return &v
}

type NullableBit struct {
	value *Bit
	isSet bool
}

func (v NullableBit) Get() *Bit {
	return v.value
}

func (v *NullableBit) Set(val *Bit) {
	v.value = val
	v.isSet = true
}

func (v NullableBit) IsSet() bool {
	return v.isSet
}

func (v *NullableBit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBit(val *Bit) *NullableBit {
	return &NullableBit{value: val, isSet: true}
}

func (v NullableBit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


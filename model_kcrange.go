/*
Corellium API

REST API to manage your virtual devices.

API version: 5.5.0-18750
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"encoding/json"
)

// checks if the Kcrange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Kcrange{}

// Kcrange 
type Kcrange struct {
	// Kernel Extension
	Kext NullableString `json:"kext,omitempty"`
	// Range
	Range []string `json:"range,omitempty"`
}

// NewKcrange instantiates a new Kcrange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKcrange() *Kcrange {
	this := Kcrange{}
	return &this
}

// NewKcrangeWithDefaults instantiates a new Kcrange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKcrangeWithDefaults() *Kcrange {
	this := Kcrange{}
	return &this
}

// GetKext returns the Kext field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Kcrange) GetKext() string {
	if o == nil || IsNil(o.Kext.Get()) {
		var ret string
		return ret
	}
	return *o.Kext.Get()
}

// GetKextOk returns a tuple with the Kext field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Kcrange) GetKextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Kext.Get(), o.Kext.IsSet()
}

// HasKext returns a boolean if a field has been set.
func (o *Kcrange) HasKext() bool {
	if o != nil && o.Kext.IsSet() {
		return true
	}

	return false
}

// SetKext gets a reference to the given NullableString and assigns it to the Kext field.
func (o *Kcrange) SetKext(v string) {
	o.Kext.Set(&v)
}
// SetKextNil sets the value for Kext to be an explicit nil
func (o *Kcrange) SetKextNil() {
	o.Kext.Set(nil)
}

// UnsetKext ensures that no value is present for Kext, not even an explicit nil
func (o *Kcrange) UnsetKext() {
	o.Kext.Unset()
}

// GetRange returns the Range field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Kcrange) GetRange() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Kcrange) GetRangeOk() ([]string, bool) {
	if o == nil || IsNil(o.Range) {
		return nil, false
	}
	return o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *Kcrange) HasRange() bool {
	if o != nil && IsNil(o.Range) {
		return true
	}

	return false
}

// SetRange gets a reference to the given []string and assigns it to the Range field.
func (o *Kcrange) SetRange(v []string) {
	o.Range = v
}

func (o Kcrange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Kcrange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Kext.IsSet() {
		toSerialize["kext"] = o.Kext.Get()
	}
	if o.Range != nil {
		toSerialize["range"] = o.Range
	}
	return toSerialize, nil
}

type NullableKcrange struct {
	value *Kcrange
	isSet bool
}

func (v NullableKcrange) Get() *Kcrange {
	return v.value
}

func (v *NullableKcrange) Set(val *Kcrange) {
	v.value = val
	v.isSet = true
}

func (v NullableKcrange) IsSet() bool {
	return v.isSet
}

func (v *NullableKcrange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKcrange(val *Kcrange) *NullableKcrange {
	return &NullableKcrange{value: val, isSet: true}
}

func (v NullableKcrange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKcrange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Corellium API

REST API to manage your virtual devices.

API version: 5.5.0-18750
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package corellium

import (
	"encoding/json"
)

// checks if the PeripheralsData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PeripheralsData{}

// PeripheralsData 
type PeripheralsData struct {
	// 
	Acceleration []float32 `json:"acceleration,omitempty"`
	// 
	Gyroscope []float32 `json:"gyroscope,omitempty"`
	// 
	Magnetic []float32 `json:"magnetic,omitempty"`
	// 
	Orientation []float32 `json:"orientation,omitempty"`
	// 
	Temperature NullableFloat32 `json:"temperature,omitempty"`
	// 
	Proximity NullableFloat32 `json:"proximity,omitempty"`
	// 
	Light NullableFloat32 `json:"light,omitempty"`
	// 
	Pressure NullableFloat32 `json:"pressure,omitempty"`
	// 
	Humidity NullableFloat32 `json:"humidity,omitempty"`
}

// NewPeripheralsData instantiates a new PeripheralsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeripheralsData() *PeripheralsData {
	this := PeripheralsData{}
	return &this
}

// NewPeripheralsDataWithDefaults instantiates a new PeripheralsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeripheralsDataWithDefaults() *PeripheralsData {
	this := PeripheralsData{}
	return &this
}

// GetAcceleration returns the Acceleration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PeripheralsData) GetAcceleration() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}
	return o.Acceleration
}

// GetAccelerationOk returns a tuple with the Acceleration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PeripheralsData) GetAccelerationOk() ([]float32, bool) {
	if o == nil || IsNil(o.Acceleration) {
		return nil, false
	}
	return o.Acceleration, true
}

// HasAcceleration returns a boolean if a field has been set.
func (o *PeripheralsData) HasAcceleration() bool {
	if o != nil && IsNil(o.Acceleration) {
		return true
	}

	return false
}

// SetAcceleration gets a reference to the given []float32 and assigns it to the Acceleration field.
func (o *PeripheralsData) SetAcceleration(v []float32) {
	o.Acceleration = v
}

// GetGyroscope returns the Gyroscope field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PeripheralsData) GetGyroscope() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}
	return o.Gyroscope
}

// GetGyroscopeOk returns a tuple with the Gyroscope field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PeripheralsData) GetGyroscopeOk() ([]float32, bool) {
	if o == nil || IsNil(o.Gyroscope) {
		return nil, false
	}
	return o.Gyroscope, true
}

// HasGyroscope returns a boolean if a field has been set.
func (o *PeripheralsData) HasGyroscope() bool {
	if o != nil && IsNil(o.Gyroscope) {
		return true
	}

	return false
}

// SetGyroscope gets a reference to the given []float32 and assigns it to the Gyroscope field.
func (o *PeripheralsData) SetGyroscope(v []float32) {
	o.Gyroscope = v
}

// GetMagnetic returns the Magnetic field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PeripheralsData) GetMagnetic() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}
	return o.Magnetic
}

// GetMagneticOk returns a tuple with the Magnetic field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PeripheralsData) GetMagneticOk() ([]float32, bool) {
	if o == nil || IsNil(o.Magnetic) {
		return nil, false
	}
	return o.Magnetic, true
}

// HasMagnetic returns a boolean if a field has been set.
func (o *PeripheralsData) HasMagnetic() bool {
	if o != nil && IsNil(o.Magnetic) {
		return true
	}

	return false
}

// SetMagnetic gets a reference to the given []float32 and assigns it to the Magnetic field.
func (o *PeripheralsData) SetMagnetic(v []float32) {
	o.Magnetic = v
}

// GetOrientation returns the Orientation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PeripheralsData) GetOrientation() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}
	return o.Orientation
}

// GetOrientationOk returns a tuple with the Orientation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PeripheralsData) GetOrientationOk() ([]float32, bool) {
	if o == nil || IsNil(o.Orientation) {
		return nil, false
	}
	return o.Orientation, true
}

// HasOrientation returns a boolean if a field has been set.
func (o *PeripheralsData) HasOrientation() bool {
	if o != nil && IsNil(o.Orientation) {
		return true
	}

	return false
}

// SetOrientation gets a reference to the given []float32 and assigns it to the Orientation field.
func (o *PeripheralsData) SetOrientation(v []float32) {
	o.Orientation = v
}

// GetTemperature returns the Temperature field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PeripheralsData) GetTemperature() float32 {
	if o == nil || IsNil(o.Temperature.Get()) {
		var ret float32
		return ret
	}
	return *o.Temperature.Get()
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PeripheralsData) GetTemperatureOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Temperature.Get(), o.Temperature.IsSet()
}

// HasTemperature returns a boolean if a field has been set.
func (o *PeripheralsData) HasTemperature() bool {
	if o != nil && o.Temperature.IsSet() {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given NullableFloat32 and assigns it to the Temperature field.
func (o *PeripheralsData) SetTemperature(v float32) {
	o.Temperature.Set(&v)
}
// SetTemperatureNil sets the value for Temperature to be an explicit nil
func (o *PeripheralsData) SetTemperatureNil() {
	o.Temperature.Set(nil)
}

// UnsetTemperature ensures that no value is present for Temperature, not even an explicit nil
func (o *PeripheralsData) UnsetTemperature() {
	o.Temperature.Unset()
}

// GetProximity returns the Proximity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PeripheralsData) GetProximity() float32 {
	if o == nil || IsNil(o.Proximity.Get()) {
		var ret float32
		return ret
	}
	return *o.Proximity.Get()
}

// GetProximityOk returns a tuple with the Proximity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PeripheralsData) GetProximityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Proximity.Get(), o.Proximity.IsSet()
}

// HasProximity returns a boolean if a field has been set.
func (o *PeripheralsData) HasProximity() bool {
	if o != nil && o.Proximity.IsSet() {
		return true
	}

	return false
}

// SetProximity gets a reference to the given NullableFloat32 and assigns it to the Proximity field.
func (o *PeripheralsData) SetProximity(v float32) {
	o.Proximity.Set(&v)
}
// SetProximityNil sets the value for Proximity to be an explicit nil
func (o *PeripheralsData) SetProximityNil() {
	o.Proximity.Set(nil)
}

// UnsetProximity ensures that no value is present for Proximity, not even an explicit nil
func (o *PeripheralsData) UnsetProximity() {
	o.Proximity.Unset()
}

// GetLight returns the Light field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PeripheralsData) GetLight() float32 {
	if o == nil || IsNil(o.Light.Get()) {
		var ret float32
		return ret
	}
	return *o.Light.Get()
}

// GetLightOk returns a tuple with the Light field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PeripheralsData) GetLightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Light.Get(), o.Light.IsSet()
}

// HasLight returns a boolean if a field has been set.
func (o *PeripheralsData) HasLight() bool {
	if o != nil && o.Light.IsSet() {
		return true
	}

	return false
}

// SetLight gets a reference to the given NullableFloat32 and assigns it to the Light field.
func (o *PeripheralsData) SetLight(v float32) {
	o.Light.Set(&v)
}
// SetLightNil sets the value for Light to be an explicit nil
func (o *PeripheralsData) SetLightNil() {
	o.Light.Set(nil)
}

// UnsetLight ensures that no value is present for Light, not even an explicit nil
func (o *PeripheralsData) UnsetLight() {
	o.Light.Unset()
}

// GetPressure returns the Pressure field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PeripheralsData) GetPressure() float32 {
	if o == nil || IsNil(o.Pressure.Get()) {
		var ret float32
		return ret
	}
	return *o.Pressure.Get()
}

// GetPressureOk returns a tuple with the Pressure field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PeripheralsData) GetPressureOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pressure.Get(), o.Pressure.IsSet()
}

// HasPressure returns a boolean if a field has been set.
func (o *PeripheralsData) HasPressure() bool {
	if o != nil && o.Pressure.IsSet() {
		return true
	}

	return false
}

// SetPressure gets a reference to the given NullableFloat32 and assigns it to the Pressure field.
func (o *PeripheralsData) SetPressure(v float32) {
	o.Pressure.Set(&v)
}
// SetPressureNil sets the value for Pressure to be an explicit nil
func (o *PeripheralsData) SetPressureNil() {
	o.Pressure.Set(nil)
}

// UnsetPressure ensures that no value is present for Pressure, not even an explicit nil
func (o *PeripheralsData) UnsetPressure() {
	o.Pressure.Unset()
}

// GetHumidity returns the Humidity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PeripheralsData) GetHumidity() float32 {
	if o == nil || IsNil(o.Humidity.Get()) {
		var ret float32
		return ret
	}
	return *o.Humidity.Get()
}

// GetHumidityOk returns a tuple with the Humidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PeripheralsData) GetHumidityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Humidity.Get(), o.Humidity.IsSet()
}

// HasHumidity returns a boolean if a field has been set.
func (o *PeripheralsData) HasHumidity() bool {
	if o != nil && o.Humidity.IsSet() {
		return true
	}

	return false
}

// SetHumidity gets a reference to the given NullableFloat32 and assigns it to the Humidity field.
func (o *PeripheralsData) SetHumidity(v float32) {
	o.Humidity.Set(&v)
}
// SetHumidityNil sets the value for Humidity to be an explicit nil
func (o *PeripheralsData) SetHumidityNil() {
	o.Humidity.Set(nil)
}

// UnsetHumidity ensures that no value is present for Humidity, not even an explicit nil
func (o *PeripheralsData) UnsetHumidity() {
	o.Humidity.Unset()
}

func (o PeripheralsData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PeripheralsData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Acceleration != nil {
		toSerialize["acceleration"] = o.Acceleration
	}
	if o.Gyroscope != nil {
		toSerialize["gyroscope"] = o.Gyroscope
	}
	if o.Magnetic != nil {
		toSerialize["magnetic"] = o.Magnetic
	}
	if o.Orientation != nil {
		toSerialize["orientation"] = o.Orientation
	}
	if o.Temperature.IsSet() {
		toSerialize["temperature"] = o.Temperature.Get()
	}
	if o.Proximity.IsSet() {
		toSerialize["proximity"] = o.Proximity.Get()
	}
	if o.Light.IsSet() {
		toSerialize["light"] = o.Light.Get()
	}
	if o.Pressure.IsSet() {
		toSerialize["pressure"] = o.Pressure.Get()
	}
	if o.Humidity.IsSet() {
		toSerialize["humidity"] = o.Humidity.Get()
	}
	return toSerialize, nil
}

type NullablePeripheralsData struct {
	value *PeripheralsData
	isSet bool
}

func (v NullablePeripheralsData) Get() *PeripheralsData {
	return v.value
}

func (v *NullablePeripheralsData) Set(val *PeripheralsData) {
	v.value = val
	v.isSet = true
}

func (v NullablePeripheralsData) IsSet() bool {
	return v.isSet
}

func (v *NullablePeripheralsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeripheralsData(val *PeripheralsData) *NullablePeripheralsData {
	return &NullablePeripheralsData{value: val, isSet: true}
}

func (v NullablePeripheralsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeripheralsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


